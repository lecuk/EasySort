<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PommaLabs.Thrower</name>
    </assembly>
    <members>
        <member name="T:PommaLabs.Thrower.ExceptionHandlers.ArgumentExceptionHandler">
            <summary>
              Handler for <see cref="T:System.ArgumentException"/>.
            </summary>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentExceptionHandler.If(System.Boolean)">
            <summary>
              Throws <see cref="T:System.ArgumentException"/> if given condition is true.
            </summary>
            <param name="condition">The condition.</param>
            <exception cref="T:System.ArgumentException">If given condition is true.</exception>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentExceptionHandler.If(System.Boolean,System.String,System.String)">
            <summary>
              Throws <see cref="T:System.ArgumentException"/> if given condition is true.
            </summary>
            <param name="condition">The condition.</param>
            <param name="argumentName">The name of the argument.</param>
            <param name="message">The message.</param>
            <exception cref="T:System.ArgumentException">If given condition is true.</exception>
            <remarks>
              <paramref name="message"/> and <paramref name="argumentName"/> are strictly required arguments.
            </remarks>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentExceptionHandler.IfNot(System.Boolean)">
            <summary>
              Throws <see cref="T:System.ArgumentException"/> if given condition is false.
            </summary>
            <param name="condition">The condition.</param>
            <exception cref="T:System.ArgumentException">If given condition is false.</exception>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentExceptionHandler.IfNot(System.Boolean,System.String,System.String)">
            <summary>
              Throws <see cref="T:System.ArgumentException"/> if given condition is false.
            </summary>
            <param name="condition">The condition.</param>
            <param name="argumentName">The name of the argument.</param>
            <param name="message">The message.</param>
            <exception cref="T:System.ArgumentException">If given condition is false.</exception>
            <remarks>
              <paramref name="message"/> and <paramref name="argumentName"/> are strictly required arguments.
            </remarks>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentExceptionHandler.IfIsEqualTo``2(``0,``1)">
            <summary>
              Throws <see cref="T:System.ArgumentException"/> if <paramref name="argument"/> is equal to <paramref name="comparand"/>.
            </summary>
            <param name="argument">First argument to be tested for equality.</param>
            <param name="comparand">Second argument to be tested for equality.</param>
            <exception cref="T:System.ArgumentException"><paramref name="argument"/> is equal to <paramref name="comparand"/>.</exception>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentExceptionHandler.IfIsEqualTo``2(``0,``1,System.String,System.String)">
            <summary>
              Throws <see cref="T:System.ArgumentException"/> if <paramref name="argument"/> is equal to <paramref name="comparand"/>.
            </summary>
            <param name="argument">First argument to be tested for equality.</param>
            <param name="comparand">Second argument to be tested for equality.</param>
            <param name="argumentName">The name of the argument.</param>
            <param name="message">The message.</param>
            <exception cref="T:System.ArgumentException"><paramref name="argument"/> is equal to <paramref name="comparand"/>.</exception>
            <remarks>
              <paramref name="message"/> and <paramref name="argumentName"/> are strictly required arguments.
            </remarks>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentExceptionHandler.IfIsNotEqualTo``2(``0,``1)">
            <summary>
              Throws <see cref="T:System.ArgumentException"/> if <paramref name="argument"/> is not equal to <paramref name="comparand"/>.
            </summary>
            <param name="argument">First argument to be tested for equality.</param>
            <param name="comparand">Second argument to be tested for equality.</param>
            <exception cref="T:System.ArgumentException">
              <paramref name="argument"/> is not equal to <paramref name="comparand"/>.
            </exception>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentExceptionHandler.IfIsNotEqualTo``2(``0,``1,System.String,System.String)">
            <summary>
              Throws <see cref="T:System.ArgumentException"/> if <paramref name="argument"/> is not equal to <paramref name="comparand"/>.
            </summary>
            <param name="argument">First argument to be tested for equality.</param>
            <param name="comparand">Second argument to be tested for equality.</param>
            <param name="argumentName">The name of the argument.</param>
            <param name="message">The message.</param>
            <exception cref="T:System.ArgumentException">
              <paramref name="argument"/> is not equal to <paramref name="comparand"/>.
            </exception>
            <remarks>
              <paramref name="message"/> and <paramref name="argumentName"/> are strictly required arguments.
            </remarks>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentExceptionHandler.IfIsSameAs``2(``0,``1)">
            <summary>
              Throws an exception of type <see cref="T:System.ArgumentException"/> if and only if specified
              arguments reference the same object.
            </summary>
            <param name="argument">First argument to test for reference equality.</param>
            <param name="comparand">Second argument to test for reference equality.</param>
            <exception cref="T:System.ArgumentException">
              <paramref name="argument"/> is the same object as <paramref name="comparand"/>.
            </exception>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentExceptionHandler.IfIsSameAs``2(``0,``1,System.String,System.String)">
            <summary>
              Throws an exception of type <see cref="T:System.ArgumentException"/> with given message
              <paramref name="message"/> if and only if specified arguments reference the same object.
            </summary>
            <param name="argument">First argument to test for reference equality.</param>
            <param name="comparand">Second argument to test for reference equality.</param>
            <param name="argumentName">The name of the argument.</param>
            <param name="message">The message the thrown exception will have.</param>
            <exception cref="T:System.ArgumentException">
              <paramref name="argument"/> is the same object as <paramref name="comparand"/>.
            </exception>
            <remarks>
              <paramref name="message"/> and <paramref name="argumentName"/> are strictly required arguments.
            </remarks>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentExceptionHandler.IfIsNotSameAs``2(``0,``1)">
            <summary>
              Throws an exception of type <see cref="T:System.ArgumentException"/> if and only if specified
              arguments do not reference the same object.
            </summary>
            <param name="argument">First argument to test for reference equality.</param>
            <param name="comparand">Second argument to test for reference equality.</param>
            <exception cref="T:System.ArgumentException">
              <paramref name="argument"/> is not the same object as <paramref name="comparand"/>.
            </exception>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentExceptionHandler.IfIsNotSameAs``2(``0,``1,System.String,System.String)">
            <summary>
              Throws an exception of type <see cref="T:System.ArgumentException"/> with given message
              <paramref name="message"/> if and only if specified arguments do not reference the same object.
            </summary>
            <param name="argument">First argument to test for reference equality.</param>
            <param name="comparand">Second argument to test for reference equality.</param>
            <param name="argumentName">The name of the argument.</param>
            <param name="message">The message the thrown exception will have.</param>
            <exception cref="T:System.ArgumentException">
              <paramref name="argument"/> is not the same object as <paramref name="comparand"/>.
            </exception>
            <remarks>
              <paramref name="message"/> and <paramref name="argumentName"/> are strictly required arguments.
            </remarks>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentExceptionHandler.IfIsNotValid``1(``0)">
            <summary>
              Throws <see cref="T:System.ArgumentException"/> if given argument is not valid.
            </summary>
            <typeparam name="TArg">The type of the argument.</typeparam>
            <param name="argument">The argument.</param>
            <exception cref="T:System.ArgumentException">If given argument is not valid.</exception>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentExceptionHandler.IfIsNotValid``1(``0,System.String,System.String)">
            <summary>
              Throws <see cref="T:System.ArgumentException"/> if given argument is not valid.
            </summary>
            <typeparam name="TArg">The type of the argument.</typeparam>
            <param name="argument">The argument.</param>
            <param name="argumentName">The name of the argument.</param>
            <param name="message">The message.</param>
            <exception cref="T:System.ArgumentException">If given argument is not valid.</exception>
            <remarks>
              <paramref name="message"/> and <paramref name="argumentName"/> are strictly required arguments.
            </remarks>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentExceptionHandler.IfIsNotValidEnum``1(``0)">
            <summary>
              Throws <see cref="T:System.ArgumentException"/> if given enumeration argument is not defined.
            </summary>
            <typeparam name="TEnum">The type of the enumeration argument.</typeparam>
            <param name="argument">The enumeration argument.</param>
            <exception cref="T:System.ArgumentException">If given enumeration argument is not defined.</exception>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentExceptionHandler.IfIsNotValidEnum``1(``0,System.String,System.String)">
            <summary>
              Throws <see cref="T:System.ArgumentException"/> if given enumeration argument is not defined.
            </summary>
            <typeparam name="TEnum">The type of the enumeration argument.</typeparam>
            <param name="argument">The enumeration argument.</param>
            <param name="argumentName">The name of the enumeration argument.</param>
            <param name="message">The message.</param>
            <exception cref="T:System.ArgumentException">If given enumeration argument is not defined.</exception>
            <remarks>
              <paramref name="message"/> and <paramref name="argumentName"/> are strictly required arguments.
            </remarks>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentExceptionHandler.IfIsNotValidEnum``1(System.Nullable{``0})">
            <summary>
              Throws <see cref="T:System.ArgumentException"/> if given enumeration argument is not defined.
            </summary>
            <typeparam name="TEnum">The type of the enumeration argument.</typeparam>
            <param name="argument">The enumeration argument.</param>
            <exception cref="T:System.ArgumentException">If given enumeration argument is not defined.</exception>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentExceptionHandler.IfIsNotValidEnum``1(System.Nullable{``0},System.String,System.String)">
            <summary>
              Throws <see cref="T:System.ArgumentException"/> if given enumeration argument is not defined.
            </summary>
            <typeparam name="TEnum">The type of the enumeration argument.</typeparam>
            <param name="argument">The enumeration argument.</param>
            <param name="argumentName">The name of the enumeration argument.</param>
            <param name="message">The message.</param>
            <exception cref="T:System.ArgumentException">If given enumeration argument is not defined.</exception>
            <remarks>
              <paramref name="message"/> and <paramref name="argumentName"/> are strictly required arguments.
            </remarks>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentExceptionHandler.IfIsNotValidEnum(System.Type,System.Object)">
            <summary>
              Throws <see cref="T:System.ArgumentException"/> if given enumeration argument is not defined.
            </summary>
            <param name="enumType">The enumeration type.</param>
            <param name="argument">The enumeration argument.</param>
            <exception cref="T:System.ArgumentException">If given enumeration argument is not defined.</exception>
            <remarks>
              This methid is slower than <see cref="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentExceptionHandler.IfIsNotValidEnum``1(``0)"/>, please use
              that one if possible.
            </remarks>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentExceptionHandler.IfIsNotValidEnum(System.Type,System.Object,System.String,System.String)">
             <summary>
               Throws <see cref="T:System.ArgumentException"/> if given enumeration argument is not defined.
             </summary>
             <param name="enumType">The enumeration type.</param>
             <param name="argument">The enumeration argument.</param>
             <param name="argumentName">The name of the enumeration argument.</param>
             <param name="message">The message.</param>
             <exception cref="T:System.ArgumentException">If given enumeration argument is not defined.</exception>
             <remarks>
               <paramref name="message"/> and <paramref name="argumentName"/> are strictly required arguments.
            
               This methid is slower than
               <see cref="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentExceptionHandler.IfIsNotValidEnum``1(``0,System.String,System.String)"/>, please use that one if possible.
             </remarks>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentExceptionHandler.IfIsNotValidEmailAddress(System.String)">
            <summary>
              Throws <see cref="T:System.ArgumentException"/> if given string is not a valid email address.
            </summary>
            <param name="emailAddress">An email address.</param>
            <exception cref="T:System.ArgumentException">If given string is not a valid email address.</exception>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentExceptionHandler.IfIsNotValidEmailAddress(System.String,PommaLabs.Thrower.Validation.EmailAddressValidator.Options)">
            <summary>
              Throws <see cref="T:System.ArgumentException"/> if given string is not a valid email address.
            </summary>
            <param name="emailAddress">An email address.</param>
            <param name="validatorOptions">Customizations for the validation process.</param>
            <exception cref="T:System.ArgumentException">If given string is not a valid email address.</exception>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentExceptionHandler.IfIsNotValidEmailAddress(System.String,System.String,System.String)">
            <summary>
              Throws <see cref="T:System.ArgumentException"/> if given string is not a valid email address.
            </summary>
            <param name="emailAddress">An email address.</param>
            <param name="argumentName">The name of the argument.</param>
            <param name="message">The message.</param>
            <exception cref="T:System.ArgumentException">If given string is not a valid email address.</exception>
            <remarks>
              <paramref name="message"/> and <paramref name="argumentName"/> are strictly required arguments.
            </remarks>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentExceptionHandler.IfIsNotValidEmailAddress(System.String,System.String,PommaLabs.Thrower.Validation.EmailAddressValidator.Options,System.String)">
            <summary>
              Throws <see cref="T:System.ArgumentException"/> if given string is not a valid email address.
            </summary>
            <param name="emailAddress">An email address.</param>
            <param name="argumentName">The name of the argument.</param>
            <param name="validatorOptions">Customizations for the validation process.</param>
            <param name="message">The message.</param>
            <exception cref="T:System.ArgumentException">If given string is not a valid email address.</exception>
            <remarks>
              <paramref name="message"/> and <paramref name="argumentName"/> are strictly required arguments.
            </remarks>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentExceptionHandler.IfIsNotValidPhoneNumber(System.String)">
            <summary>
              Throws <see cref="T:System.ArgumentException"/> if given string is not a valid phone number.
            </summary>
            <param name="phoneNumber">A phone number.</param>
            <exception cref="T:System.ArgumentException">If given string is not a valid phone number.</exception>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentExceptionHandler.IfIsNotValidPhoneNumber(System.String,System.String,System.String)">
            <summary>
              Throws <see cref="T:System.ArgumentException"/> if given string is not a valid phone number.
            </summary>
            <param name="phoneNumber">A phone number.</param>
            <param name="argumentName">The name of the argument.</param>
            <param name="message">The message.</param>
            <exception cref="T:System.ArgumentException">If given string is not a valid phone number.</exception>
            <remarks>
              <paramref name="message"/> and <paramref name="argumentName"/> are strictly required arguments.
            </remarks>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentExceptionHandler.IfIsNullOrEmpty(System.String)">
            <summary>
              Throws <see cref="T:System.ArgumentException"/> if given string is null or empty.
            </summary>
            <param name="value">The string value.</param>
            <exception cref="T:System.ArgumentException">If given string is null or empty.</exception>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentExceptionHandler.IfIsNullOrEmpty(System.String,System.String,System.String)">
            <summary>
              Throws <see cref="T:System.ArgumentException"/> if given string is null or empty.
            </summary>
            <param name="value">The string value.</param>
            <param name="argumentName">The name of the argument.</param>
            <param name="message">The optional message.</param>
            <exception cref="T:System.ArgumentException">If given string is null or empty.</exception>
            <remarks>
              <paramref name="message"/> and <paramref name="argumentName"/> are strictly required arguments.
            </remarks>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentExceptionHandler.IfIsNullOrWhiteSpace(System.String)">
            <summary>
              Throws <see cref="T:System.ArgumentException"/> if given string is null, empty or blank.
            </summary>
            <param name="value">The string value.</param>
            <exception cref="T:System.ArgumentException">If given string is null, empty or blank.</exception>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentExceptionHandler.IfIsNullOrWhiteSpace(System.String,System.String,System.String)">
            <summary>
              Throws <see cref="T:System.ArgumentException"/> if given string is null, empty or blank.
            </summary>
            <param name="value">The string value.</param>
            <param name="argumentName">The name of the argument.</param>
            <param name="message">The optional message.</param>
            <exception cref="T:System.ArgumentException">If given string is null, empty or blank.</exception>
            <remarks>
              <paramref name="message"/> and <paramref name="argumentName"/> are strictly required arguments.
            </remarks>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentExceptionHandler.IfIsNullOrEmpty``1(System.Collections.Generic.ICollection{``0})">
            <summary>
              Throws <see cref="T:System.ArgumentException"/> if given collection is null or empty.
            </summary>
            <typeparam name="TItem">The type of the items contained in the collection.</typeparam>
            <param name="value">The collection.</param>
            <exception cref="T:System.ArgumentException">If given collection is null or empty.</exception>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentExceptionHandler.IfIsNullOrEmpty``1(System.Collections.Generic.ICollection{``0},System.String,System.String)">
            <summary>
              Throws <see cref="T:System.ArgumentException"/> if given collection is null or empty.
            </summary>
            <typeparam name="TItem">The type of the items contained in the collection.</typeparam>
            <param name="value">The collection.</param>
            <param name="argumentName">The name of the argument.</param>
            <param name="message">The optional message.</param>
            <exception cref="T:System.ArgumentException">If given collection is null or empty.</exception>
            <remarks>
              <paramref name="message"/> and <paramref name="argumentName"/> are strictly required arguments.
            </remarks>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentExceptionHandler.IfIsNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
              Throws <see cref="T:System.ArgumentException"/> if given enumerable is null or empty.
            </summary>
            <typeparam name="TItem">The type of the items contained in the enumerable.</typeparam>
            <param name="value">The enumerable.</param>
            <exception cref="T:System.ArgumentException">If given enumerable is null or empty.</exception>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentExceptionHandler.IfIsNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0},System.String,System.String)">
            <summary>
              Throws <see cref="T:System.ArgumentException"/> if given enumerable is null or empty.
            </summary>
            <typeparam name="TItem">The type of the items contained in the enumerable.</typeparam>
            <param name="value">The enumerable.</param>
            <param name="argumentName">The name of the argument.</param>
            <param name="message">The optional message.</param>
            <exception cref="T:System.ArgumentException">If given enumerable is null or empty.</exception>
            <remarks>
              <paramref name="message"/> and <paramref name="argumentName"/> are strictly required arguments.
            </remarks>
        </member>
        <member name="T:PommaLabs.Thrower.ExceptionHandlers.ArgumentNullExceptionHandler">
            <summary>
              Handler for <see cref="T:System.ArgumentNullException"/>.
            </summary>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentNullExceptionHandler.If(System.Boolean)">
            <summary>
              Throws <see cref="T:System.ArgumentNullException"/> if given condition is true.
            </summary>
            <param name="condition">The condition.</param>
            <exception cref="T:System.ArgumentNullException">If given condition is true.</exception>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentNullExceptionHandler.If(System.Boolean,System.String,System.String)">
            <summary>
              Throws <see cref="T:System.ArgumentException"/> if given condition is true.
            </summary>
            <param name="condition">The condition.</param>
            <param name="argumentName">The name of the argument.</param>
            <param name="message">The message.</param>
            <exception cref="T:System.ArgumentNullException">If given condition is true.</exception>
            <remarks>
              <paramref name="message"/> and <paramref name="argumentName"/> are strictly required arguments.
            </remarks>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentNullExceptionHandler.IfNot(System.Boolean)">
            <summary>
              Throws <see cref="T:System.ArgumentNullException"/> if given condition is false.
            </summary>
            <param name="condition">The condition.</param>
            <exception cref="T:System.ArgumentNullException">If given condition is false.</exception>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentNullExceptionHandler.IfNot(System.Boolean,System.String,System.String)">
            <summary>
              Throws <see cref="T:System.ArgumentException"/> if given condition is false.
            </summary>
            <param name="condition">The condition.</param>
            <param name="argumentName">The name of the argument.</param>
            <param name="message">The message.</param>
            <exception cref="T:System.ArgumentNullException">If given condition is false.</exception>
            <remarks>
              <paramref name="message"/> and <paramref name="argumentName"/> are strictly required arguments.
            </remarks>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentNullExceptionHandler.IfIsNull``1(``0)">
            <summary>
              Throws <see cref="T:System.ArgumentNullException"/> if given argument if null.
            </summary>
            <typeparam name="TArg">The type of the argument.</typeparam>
            <param name="argument">The argument.</param>
            <exception cref="T:System.ArgumentNullException">If given argument is null.</exception>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentNullExceptionHandler.IfIsNull``1(``0,System.String,System.String)">
            <summary>
              Throws <see cref="T:System.ArgumentNullException"/> if given argument if null.
            </summary>
            <typeparam name="TArg">The type of the argument.</typeparam>
            <param name="argument">The argument.</param>
            <param name="argumentName">The name of the argument.</param>
            <param name="message">The message that should be put into the exception.</param>
            <exception cref="T:System.ArgumentNullException">If given argument is null.</exception>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentNullExceptionHandler.IfIsNull``1(System.Nullable{``0})">
            <summary>
              Throws <see cref="T:System.ArgumentNullException"/> if given argument if null.
            </summary>
            <typeparam name="TArg">The type of the nullable argument.</typeparam>
            <param name="argument">The argument.</param>
            <exception cref="T:System.ArgumentNullException">If given argument has no value.</exception>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentNullExceptionHandler.IfIsNull``1(System.Nullable{``0}@)">
            <summary>
              Throws <see cref="T:System.ArgumentNullException"/> if given argument if null.
            </summary>
            <typeparam name="TArg">The type of the nullable argument.</typeparam>
            <param name="argument">The argument, by reference.</param>
            <exception cref="T:System.ArgumentNullException">If given argument has no value.</exception>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentNullExceptionHandler.IfIsNull``1(System.Nullable{``0},System.String,System.String)">
            <summary>
              Throws <see cref="T:System.ArgumentNullException"/> if given argument if null.
            </summary>
            <typeparam name="TArg">The type of the nullable argument.</typeparam>
            <param name="argument">The argument.</param>
            <param name="argumentName">The name of the argument.</param>
            <param name="message">The message that should be put into the exception.</param>
            <exception cref="T:System.ArgumentNullException">If given argument has no value.</exception>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentNullExceptionHandler.IfIsNull``1(System.Nullable{``0}@,System.String,System.String)">
            <summary>
              Throws <see cref="T:System.ArgumentNullException"/> if given argument if null.
            </summary>
            <typeparam name="TArg">The type of the nullable argument.</typeparam>
            <param name="argument">The argument, by reference.</param>
            <param name="argumentName">The name of the argument.</param>
            <param name="message">The message that should be put into the exception.</param>
            <exception cref="T:System.ArgumentNullException">If given argument has no value.</exception>
        </member>
        <member name="T:PommaLabs.Thrower.ExceptionHandlers.ArgumentOutOfRangeExceptionHandler">
            <summary>
              Handler for <see cref="T:System.ArgumentOutOfRangeException"/>.
            </summary>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentOutOfRangeExceptionHandler.If(System.Boolean,System.String)">
            <summary>
              Throws <see cref="T:System.ArgumentOutOfRangeException"/> if given condition is true.
            </summary>
            <param name="condition">The condition.</param>
            <param name="argumentName">The optional name of the argument.</param>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentOutOfRangeExceptionHandler.If(System.Boolean,System.String,System.String)">
            <summary>
              Throws <see cref="T:System.ArgumentOutOfRangeException"/> if given condition is true.
            </summary>
            <param name="condition">The condition.</param>
            <param name="argumentName">The name of the argument.</param>
            <param name="message">The message.</param>
            <remarks>
              <paramref name="message"/> and <paramref name="argumentName"/> are strictly required arguments.
            </remarks>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentOutOfRangeExceptionHandler.IfNot(System.Boolean,System.String)">
            <summary>
              Throws <see cref="T:System.ArgumentOutOfRangeException"/> if given condition is false.
            </summary>
            <param name="condition">The condition.</param>
            <param name="argumentName">The optional name of the argument.</param>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentOutOfRangeExceptionHandler.IfNot(System.Boolean,System.String,System.String)">
            <summary>
              Throws <see cref="T:System.ArgumentOutOfRangeException"/> if given condition is false.
            </summary>
            <param name="condition">The condition.</param>
            <param name="argumentName">The name of the argument.</param>
            <param name="message">The message.</param>
            <remarks>
              <paramref name="message"/> and <paramref name="argumentName"/> are strictly required arguments.
            </remarks>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentOutOfRangeExceptionHandler.IfIsNaN(System.Double,System.String)">
            <summary>
              Throws an exception of type <see cref="T:System.ArgumentOutOfRangeException"/> if and only if
              specified double is <see cref="F:System.Double.NaN"/>.
            </summary>
            <param name="number">The double to be tested for <see cref="F:System.Double.NaN"/> equality.</param>
            <param name="argumentName">The optional argument name.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Specified double is <see cref="F:System.Double.NaN"/>.</exception>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentOutOfRangeExceptionHandler.IfIsNaN(System.Double,System.String,System.String)">
            <summary>
              Throws an exception of type <see cref="T:System.ArgumentOutOfRangeException"/> if and only if
              specified double is <see cref="F:System.Double.NaN"/>.
            </summary>
            <param name="number">The double to be tested for <see cref="F:System.Double.NaN"/> equality.</param>
            <param name="argumentName">The argument name.</param>
            <param name="message">The message the thrown exception will have.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Specified double is <see cref="F:System.Double.NaN"/>.</exception>
            <remarks>
              <paramref name="message"/> and <paramref name="argumentName"/> are strictly required arguments.
            </remarks>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentOutOfRangeExceptionHandler.IfIsPositiveInfinity(System.Double,System.String)">
            <summary>
              Throws an exception of type <see cref="T:System.ArgumentOutOfRangeException"/> if and only if
              specified double is <see cref="F:System.Double.PositiveInfinity"/>.
            </summary>
            <param name="number">
              The double to be tested for <see cref="F:System.Double.PositiveInfinity"/> equality.
            </param>
            <param name="argumentName">The optional argument name.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Specified double is <see cref="F:System.Double.PositiveInfinity"/>.</exception>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentOutOfRangeExceptionHandler.IfIsPositiveInfinity(System.Double,System.String,System.String)">
            <summary>
              Throws an exception of type <see cref="T:System.ArgumentOutOfRangeException"/> if and only if
              specified double is <see cref="F:System.Double.PositiveInfinity"/>.
            </summary>
            <param name="number">
              The double to be tested for <see cref="F:System.Double.PositiveInfinity"/> equality.
            </param>
            <param name="argumentName">The argument name.</param>
            <param name="message">The message the thrown exception will have.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Specified double is <see cref="F:System.Double.PositiveInfinity"/>.</exception>
            <remarks>
              <paramref name="message"/> and <paramref name="argumentName"/> are strictly required arguments.
            </remarks>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentOutOfRangeExceptionHandler.IfIsNegativeInfinity(System.Double,System.String)">
            <summary>
              Throws an exception of type <see cref="T:System.ArgumentOutOfRangeException"/> if and only if
              specified double is <see cref="F:System.Double.NegativeInfinity"/>.
            </summary>
            <param name="number">
              The double to be tested for <see cref="F:System.Double.NegativeInfinity"/> equality.
            </param>
            <param name="argumentName">The optional argument name.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Specified double is <see cref="F:System.Double.NegativeInfinity"/>.</exception>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentOutOfRangeExceptionHandler.IfIsNegativeInfinity(System.Double,System.String,System.String)">
            <summary>
              Throws an exception of type <see cref="T:System.ArgumentOutOfRangeException"/> if and only if
              specified double is <see cref="F:System.Double.NegativeInfinity"/>.
            </summary>
            <param name="number">
              The double to be tested for <see cref="F:System.Double.NegativeInfinity"/> equality.
            </param>
            <param name="argumentName">The argument name.</param>
            <param name="message">The message the thrown exception will have.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Specified double is <see cref="F:System.Double.NegativeInfinity"/>.</exception>
            <remarks>
              <paramref name="message"/> and <paramref name="argumentName"/> are strictly required arguments.
            </remarks>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentOutOfRangeExceptionHandler.IfIsLess``1(``0,``0)">
            <summary>
              Throws <see cref="T:System.ArgumentOutOfRangeException"/> if <paramref name="argument1"/> is
              less than <paramref name="argument2"/>.
            </summary>
            <typeparam name="TArg">The type of the arguments.</typeparam>
            <param name="argument1">The left side argument.</param>
            <param name="argument2">The right side argument.</param>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentOutOfRangeExceptionHandler.IfIsLess(System.IComparable,System.IComparable)">
            <summary>
              Throws <see cref="T:System.ArgumentOutOfRangeException"/> if <paramref name="argument1"/> is
              less than <paramref name="argument2"/>.
            </summary>
            <param name="argument1">The left side argument.</param>
            <param name="argument2">The right side argument.</param>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentOutOfRangeExceptionHandler.IfIsLess``1(``0,``0,System.String)">
            <summary>
              Throws <see cref="T:System.ArgumentOutOfRangeException"/> if <paramref name="argument1"/> is
              less than <paramref name="argument2"/>.
            </summary>
            <typeparam name="TArg">The type of the arguments.</typeparam>
            <param name="argument1">The left side argument.</param>
            <param name="argument2">The right side argument.</param>
            <param name="argumentName">The name of the argument.</param>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentOutOfRangeExceptionHandler.IfIsLess(System.IComparable,System.IComparable,System.String)">
            <summary>
              Throws <see cref="T:System.ArgumentOutOfRangeException"/> if <paramref name="argument1"/> is
              less than <paramref name="argument2"/>.
            </summary>
            <param name="argument1">The left side argument.</param>
            <param name="argument2">The right side argument.</param>
            <param name="argumentName">The name of the argument.</param>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentOutOfRangeExceptionHandler.IfIsLess``1(``0,``0,System.String,System.String)">
            <summary>
              Throws <see cref="T:System.ArgumentOutOfRangeException"/> if <paramref name="argument1"/> is
              less than <paramref name="argument2"/>.
            </summary>
            <typeparam name="TArg">The type of the arguments.</typeparam>
            <param name="argument1">The left side argument.</param>
            <param name="argument2">The right side argument.</param>
            <param name="argumentName">The name of the argument.</param>
            <param name="message">The message that should be put into the exception.</param>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentOutOfRangeExceptionHandler.IfIsLess(System.IComparable,System.IComparable,System.String,System.String)">
            <summary>
              Throws <see cref="T:System.ArgumentOutOfRangeException"/> if <paramref name="argument1"/> is
              less than <paramref name="argument2"/>.
            </summary>
            <param name="argument1">The left side argument.</param>
            <param name="argument2">The right side argument.</param>
            <param name="argumentName">The name of the argument.</param>
            <param name="message">The message that should be put into the exception.</param>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentOutOfRangeExceptionHandler.IfIsLessOrEqual``1(``0,``0)">
            <summary>
              Throws <see cref="T:System.ArgumentOutOfRangeException"/> if <paramref name="argument1"/> is
              less than or equal to <paramref name="argument2"/>.
            </summary>
            <typeparam name="TArg">The type of the arguments.</typeparam>
            <param name="argument1">The left side argument.</param>
            <param name="argument2">The right side argument.</param>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentOutOfRangeExceptionHandler.IfIsLessOrEqual(System.IComparable,System.IComparable)">
            <summary>
              Throws <see cref="T:System.ArgumentOutOfRangeException"/> if <paramref name="argument1"/> is
              less than or equal to <paramref name="argument2"/>.
            </summary>
            <param name="argument1">The left side argument.</param>
            <param name="argument2">The right side argument.</param>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentOutOfRangeExceptionHandler.IfIsLessOrEqual``1(``0,``0,System.String)">
            <summary>
              Throws <see cref="T:System.ArgumentOutOfRangeException"/> if <paramref name="argument1"/> is
              less than or equal to <paramref name="argument2"/>.
            </summary>
            <typeparam name="TArg">The type of the arguments.</typeparam>
            <param name="argument1">The left side argument.</param>
            <param name="argument2">The right side argument.</param>
            <param name="argumentName">The name of the argument.</param>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentOutOfRangeExceptionHandler.IfIsLessOrEqual(System.IComparable,System.IComparable,System.String)">
            <summary>
              Throws <see cref="T:System.ArgumentOutOfRangeException"/> if <paramref name="argument1"/> is
              less than or equal to <paramref name="argument2"/>.
            </summary>
            <param name="argument1">The left side argument.</param>
            <param name="argument2">The right side argument.</param>
            <param name="argumentName">The name of the argument.</param>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentOutOfRangeExceptionHandler.IfIsLessOrEqual``1(``0,``0,System.String,System.String)">
            <summary>
              Throws <see cref="T:System.ArgumentOutOfRangeException"/> if <paramref name="argument1"/> is
              less than or equal to <paramref name="argument2"/>.
            </summary>
            <typeparam name="TArg">The type of the arguments.</typeparam>
            <param name="argument1">The left side argument.</param>
            <param name="argument2">The right side argument.</param>
            <param name="argumentName">The name of the argument.</param>
            <param name="message">The message that should be put into the exception.</param>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentOutOfRangeExceptionHandler.IfIsLessOrEqual(System.IComparable,System.IComparable,System.String,System.String)">
            <summary>
              Throws <see cref="T:System.ArgumentOutOfRangeException"/> if <paramref name="argument1"/> is
              less than or equal to <paramref name="argument2"/>.
            </summary>
            <param name="argument1">The left side argument.</param>
            <param name="argument2">The right side argument.</param>
            <param name="argumentName">The name of the argument.</param>
            <param name="message">The message that should be put into the exception.</param>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentOutOfRangeExceptionHandler.IfIsGreater``1(``0,``0)">
            <summary>
              Throws <see cref="T:System.ArgumentOutOfRangeException"/> if <paramref name="argument1"/> is
              greater than <paramref name="argument2"/>.
            </summary>
            <typeparam name="TArg">The type of the arguments.</typeparam>
            <param name="argument1">The left side argument.</param>
            <param name="argument2">The right side argument.</param>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentOutOfRangeExceptionHandler.IfIsGreater(System.IComparable,System.IComparable)">
            <summary>
              Throws <see cref="T:System.ArgumentOutOfRangeException"/> if <paramref name="argument1"/> is
              greater than <paramref name="argument2"/>.
            </summary>
            <param name="argument1">The left side argument.</param>
            <param name="argument2">The right side argument.</param>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentOutOfRangeExceptionHandler.IfIsGreater``1(``0,``0,System.String)">
            <summary>
              Throws <see cref="T:System.ArgumentOutOfRangeException"/> if <paramref name="argument1"/> is
              greater than <paramref name="argument2"/>.
            </summary>
            <typeparam name="TArg">The type of the arguments.</typeparam>
            <param name="argument1">The left side argument.</param>
            <param name="argument2">The right side argument.</param>
            <param name="argumentName">The name of the argument.</param>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentOutOfRangeExceptionHandler.IfIsGreater(System.IComparable,System.IComparable,System.String)">
            <summary>
              Throws <see cref="T:System.ArgumentOutOfRangeException"/> if <paramref name="argument1"/> is
              greater than <paramref name="argument2"/>.
            </summary>
            <param name="argument1">The left side argument.</param>
            <param name="argument2">The right side argument.</param>
            <param name="argumentName">The name of the argument.</param>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentOutOfRangeExceptionHandler.IfIsGreater``1(``0,``0,System.String,System.String)">
            <summary>
              Throws <see cref="T:System.ArgumentOutOfRangeException"/> if <paramref name="argument1"/> is
              greater than <paramref name="argument2"/>.
            </summary>
            <typeparam name="TArg">The type of the arguments.</typeparam>
            <param name="argument1">The left side argument.</param>
            <param name="argument2">The right side argument.</param>
            <param name="argumentName">The name of the argument.</param>
            <param name="message">The message that should be put into the exception.</param>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentOutOfRangeExceptionHandler.IfIsGreater(System.IComparable,System.IComparable,System.String,System.String)">
            <summary>
              Throws <see cref="T:System.ArgumentOutOfRangeException"/> if <paramref name="argument1"/> is
              greater than <paramref name="argument2"/>.
            </summary>
            <param name="argument1">The left side argument.</param>
            <param name="argument2">The right side argument.</param>
            <param name="argumentName">The name of the argument.</param>
            <param name="message">The message that should be put into the exception.</param>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentOutOfRangeExceptionHandler.IfIsGreaterOrEqual``1(``0,``0)">
            <summary>
              Throws <see cref="T:System.ArgumentOutOfRangeException"/> if <paramref name="argument1"/> is
              greater than or equal to <paramref name="argument2"/>.
            </summary>
            <typeparam name="TArg">The type of the arguments.</typeparam>
            <param name="argument1">The left side argument.</param>
            <param name="argument2">The right side argument.</param>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentOutOfRangeExceptionHandler.IfIsGreaterOrEqual(System.IComparable,System.IComparable)">
            <summary>
              Throws <see cref="T:System.ArgumentOutOfRangeException"/> if <paramref name="argument1"/> is
              greater than or equal to <paramref name="argument2"/>.
            </summary>
            <param name="argument1">The left side argument.</param>
            <param name="argument2">The right side argument.</param>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentOutOfRangeExceptionHandler.IfIsGreaterOrEqual``1(``0,``0,System.String)">
            <summary>
              Throws <see cref="T:System.ArgumentOutOfRangeException"/> if <paramref name="argument1"/> is
              greater than or equal to <paramref name="argument2"/>.
            </summary>
            <typeparam name="TArg">The type of the arguments.</typeparam>
            <param name="argument1">The left side argument.</param>
            <param name="argument2">The right side argument.</param>
            <param name="argumentName">The name of the argument.</param>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentOutOfRangeExceptionHandler.IfIsGreaterOrEqual(System.IComparable,System.IComparable,System.String)">
            <summary>
              Throws <see cref="T:System.ArgumentOutOfRangeException"/> if <paramref name="argument1"/> is
              greater than or equal to <paramref name="argument2"/>.
            </summary>
            <param name="argument1">The left side argument.</param>
            <param name="argument2">The right side argument.</param>
            <param name="argumentName">The name of the argument.</param>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentOutOfRangeExceptionHandler.IfIsGreaterOrEqual``1(``0,``0,System.String,System.String)">
            <summary>
              Throws <see cref="T:System.ArgumentOutOfRangeException"/> if <paramref name="argument1"/> is
              greater than or equal to <paramref name="argument2"/>.
            </summary>
            <typeparam name="TArg">The type of the arguments.</typeparam>
            <param name="argument1">The left side argument.</param>
            <param name="argument2">The right side argument.</param>
            <param name="argumentName">The name of the argument.</param>
            <param name="message">The message that should be put into the exception.</param>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentOutOfRangeExceptionHandler.IfIsGreaterOrEqual(System.IComparable,System.IComparable,System.String,System.String)">
            <summary>
              Throws <see cref="T:System.ArgumentOutOfRangeException"/> if <paramref name="argument1"/> is
              greater than or equal to <paramref name="argument2"/>.
            </summary>
            <param name="argument1">The left side argument.</param>
            <param name="argument2">The right side argument.</param>
            <param name="argumentName">The name of the argument.</param>
            <param name="message">The message that should be put into the exception.</param>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentOutOfRangeExceptionHandler.IfIsEqual``1(``0,``0)">
            <summary>
              Throws <see cref="T:System.ArgumentOutOfRangeException"/> if <paramref name="argument1"/> is
              equal to <paramref name="argument2"/>.
            </summary>
            <typeparam name="TArg">The type of the arguments.</typeparam>
            <param name="argument1">The left side argument.</param>
            <param name="argument2">The right side argument.</param>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentOutOfRangeExceptionHandler.IfIsEqual(System.IComparable,System.IComparable)">
            <summary>
              Throws <see cref="T:System.ArgumentOutOfRangeException"/> if <paramref name="argument1"/> is
              equal to <paramref name="argument2"/>.
            </summary>
            <param name="argument1">The left side argument.</param>
            <param name="argument2">The right side argument.</param>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentOutOfRangeExceptionHandler.IfIsEqual``1(``0,``0,System.String)">
            <summary>
              Throws <see cref="T:System.ArgumentOutOfRangeException"/> if <paramref name="argument1"/> is
              equal to <paramref name="argument2"/>.
            </summary>
            <typeparam name="TArg">The type of the arguments.</typeparam>
            <param name="argument1">The left side argument.</param>
            <param name="argument2">The right side argument.</param>
            <param name="argumentName">The name of the argument.</param>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentOutOfRangeExceptionHandler.IfIsEqual(System.IComparable,System.IComparable,System.String)">
            <summary>
              Throws <see cref="T:System.ArgumentOutOfRangeException"/> if <paramref name="argument1"/> is
              equal to <paramref name="argument2"/>.
            </summary>
            <param name="argument1">The left side argument.</param>
            <param name="argument2">The right side argument.</param>
            <param name="argumentName">The name of the argument.</param>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentOutOfRangeExceptionHandler.IfIsEqual``1(``0,``0,System.String,System.String)">
            <summary>
              Throws <see cref="T:System.ArgumentOutOfRangeException"/> if <paramref name="argument1"/> is
              equal to <paramref name="argument2"/>.
            </summary>
            <typeparam name="TArg">The type of the arguments.</typeparam>
            <param name="argument1">The left side argument.</param>
            <param name="argument2">The right side argument.</param>
            <param name="argumentName">The name of the argument.</param>
            <param name="message">The message that should be put into the exception.</param>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentOutOfRangeExceptionHandler.IfIsEqual(System.IComparable,System.IComparable,System.String,System.String)">
            <summary>
              Throws <see cref="T:System.ArgumentOutOfRangeException"/> if <paramref name="argument1"/> is
              equal to <paramref name="argument2"/>.
            </summary>
            <param name="argument1">The left side argument.</param>
            <param name="argument2">The right side argument.</param>
            <param name="argumentName">The name of the argument.</param>
            <param name="message">The message that should be put into the exception.</param>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentOutOfRangeExceptionHandler.IfIsNotEqual``1(``0,``0)">
            <summary>
              Throws <see cref="T:System.ArgumentOutOfRangeException"/> if <paramref name="argument1"/> is not
              equal to <paramref name="argument2"/>.
            </summary>
            <typeparam name="TArg">The type of the arguments.</typeparam>
            <param name="argument1">The left side argument.</param>
            <param name="argument2">The right side argument.</param>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentOutOfRangeExceptionHandler.IfIsNotEqual(System.IComparable,System.IComparable)">
            <summary>
              Throws <see cref="T:System.ArgumentOutOfRangeException"/> if <paramref name="argument1"/> is not
              equal to <paramref name="argument2"/>.
            </summary>
            <param name="argument1">The left side argument.</param>
            <param name="argument2">The right side argument.</param>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentOutOfRangeExceptionHandler.IfIsNotEqual``1(``0,``0,System.String)">
            <summary>
              Throws <see cref="T:System.ArgumentOutOfRangeException"/> if <paramref name="argument1"/> is not
              equal to <paramref name="argument2"/>.
            </summary>
            <typeparam name="TArg">The type of the arguments.</typeparam>
            <param name="argument1">The left side argument.</param>
            <param name="argument2">The right side argument.</param>
            <param name="argumentName">The name of the argument.</param>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentOutOfRangeExceptionHandler.IfIsNotEqual(System.IComparable,System.IComparable,System.String)">
            <summary>
              Throws <see cref="T:System.ArgumentOutOfRangeException"/> if <paramref name="argument1"/> is not
              equal to <paramref name="argument2"/>.
            </summary>
            <param name="argument1">The left side argument.</param>
            <param name="argument2">The right side argument.</param>
            <param name="argumentName">The name of the argument.</param>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentOutOfRangeExceptionHandler.IfIsNotEqual``1(``0,``0,System.String,System.String)">
            <summary>
              Throws <see cref="T:System.ArgumentOutOfRangeException"/> if <paramref name="argument1"/> is not
              equal to <paramref name="argument2"/>.
            </summary>
            <typeparam name="TArg">The type of the arguments.</typeparam>
            <param name="argument1">The left side argument.</param>
            <param name="argument2">The right side argument.</param>
            <param name="argumentName">The name of the argument.</param>
            <param name="message">The message that should be put into the exception.</param>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ArgumentOutOfRangeExceptionHandler.IfIsNotEqual(System.IComparable,System.IComparable,System.String,System.String)">
            <summary>
              Throws <see cref="T:System.ArgumentOutOfRangeException"/> if <paramref name="argument1"/> is not
              equal to <paramref name="argument2"/>.
            </summary>
            <param name="argument1">The left side argument.</param>
            <param name="argument2">The right side argument.</param>
            <param name="argumentName">The name of the argument.</param>
            <param name="message">The message that should be put into the exception.</param>
        </member>
        <member name="T:PommaLabs.Thrower.ExceptionHandlers.GenericExceptionHandler`1">
            <summary>
              Generic handler used for common exceptions like <see cref="T:System.NotSupportedException"/>.
            </summary>
            <typeparam name="TException">The type of the handled exception.</typeparam>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.GenericExceptionHandler`1.NewWithMessage(System.String)">
            <summary>
              Creates an exception with given message.
            </summary>
            <param name="message">The message used by the exception.</param>
            <returns>An exception with given message.</returns>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.GenericExceptionHandler`1.If(System.Boolean,System.String)">
            <summary>
              Throws <typeparamref name="TException"/> if given condition is true.
            </summary>
            <param name="condition">The condition.</param>
            <param name="message">The optional message.</param>
            <exception cref="T:System.Exception">
              If given condition is true, an exception of type <typeparamref name="TException"/> is thrown.
            </exception>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.GenericExceptionHandler`1.IfNot(System.Boolean,System.String)">
            <summary>
              Throws <typeparamref name="TException"/> if given condition is false.
            </summary>
            <param name="condition">The condition.</param>
            <param name="message">The optional message.</param>
            <exception cref="T:System.Exception">
              If given condition is true, an exception of type <typeparamref name="TException"/> is thrown.
            </exception>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.GenericExceptionHandler`1.IfIsAssignableFrom``1(System.Object,System.String)">
            <summary>
              Throws an exception of type <typeparamref name="TException"/> if and only if an
              instance of given type can be assigned to specified object.
            </summary>
            <typeparam name="TType">The type whose instance must be assigned to given object.</typeparam>
            <param name="instance">The object to be tested.</param>
            <param name="message">The optional message.</param>
            <exception cref="T:System.Exception">
              If given condition is true, an exception of type <typeparamref name="TException"/> is thrown.
            </exception>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.GenericExceptionHandler`1.IfIsNotAssignableFrom``1(System.Object,System.String)">
            <summary>
              Throws an exception of type <typeparamref name="TException"/> if and only if an
              instance of given type cannot be assigned to specified object.
            </summary>
            <typeparam name="TType">
              The type whose instance must not be assigned to given object.
            </typeparam>
            <param name="instance">The object to be tested.</param>
            <param name="message">The optional message.</param>
            <exception cref="T:System.Exception">
              If given condition is true, an exception of type <typeparamref name="TException"/> is thrown.
            </exception>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.GenericExceptionHandler`1.IfIsAssignableFrom(System.Object,System.Type,System.String)">
            <summary>
              Throws an exception of type <typeparamref name="TException"/> if and only if an
              instance of given type can be assigned to specified object.
            </summary>
            <param name="instance">The object to be tested.</param>
            <param name="type">The type whose instance must be assigned to given object.</param>
            <param name="message">The optional message.</param>
            <exception cref="T:System.Exception">
              If given condition is true, an exception of type <typeparamref name="TException"/> is thrown.
            </exception>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.GenericExceptionHandler`1.IfIsNotAssignableFrom(System.Object,System.Type,System.String)">
            <summary>
              Throws an exception of type <typeparamref name="TException"/> if and only if an
              instance of given type cannot be assigned to specified object.
            </summary>
            <param name="instance">The object to be tested.</param>
            <param name="type">The type whose instance must not be assigned to given object.</param>
            <param name="message">The optional message.</param>
            <exception cref="T:System.Exception">
              If given condition is true, an exception of type <typeparamref name="TException"/> is thrown.
            </exception>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.GenericExceptionHandler`1.IfIsInstanceOf``1(System.Object,System.String)">
            <summary>
              Throws an exception of type <typeparamref name="TException"/> if and only if specified
              object has given type.
            </summary>
            <typeparam name="TType">The type the object must have.</typeparam>
            <param name="instance">The object to be tested.</param>
            <param name="message">The optional message.</param>
            <exception cref="T:System.Exception">
              If given condition is true, an exception of type <typeparamref name="TException"/> is thrown.
            </exception>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.GenericExceptionHandler`1.IfIsNotInstanceOf``1(System.Object,System.String)">
            <summary>
              Throws an exception of type <typeparamref name="TException"/> if and only if specified
              object has not given type.
            </summary>
            <typeparam name="TType">The type the object must not have.</typeparam>
            <param name="instance">The object to be tested.</param>
            <param name="message">The optional message.</param>
            <exception cref="T:System.Exception">
              If given condition is true, an exception of type <typeparamref name="TException"/> is thrown.
            </exception>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.GenericExceptionHandler`1.IfIsInstanceOf(System.Object,System.Type,System.String)">
            <summary>
              Throws an exception of type <typeparamref name="TException"/> if and only if specified
              object has given type.
            </summary>
            <param name="instance">The object to be tested.</param>
            <param name="type">The type the object must have.</param>
            <param name="message">The optional message.</param>
            <exception cref="T:System.Exception">
              If given condition is true, an exception of type <typeparamref name="TException"/> is thrown.
            </exception>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.GenericExceptionHandler`1.IfIsNotInstanceOf(System.Object,System.Type,System.String)">
            <summary>
              Throws an exception of type <typeparamref name="TException"/> if and only if specified
              object has not given type.
            </summary>
            <param name="instance">The object to be tested.</param>
            <param name="type">The type the object must not have.</param>
            <param name="message">The optional message.</param>
            <exception cref="T:System.Exception">
              If given condition is true, an exception of type <typeparamref name="TException"/> is thrown.
            </exception>
        </member>
        <member name="T:PommaLabs.Thrower.ExceptionHandlers.IndexOutOfRangeExceptionHandler">
            <summary>
              Handler for <see cref="T:System.IndexOutOfRangeException"/>.
            </summary>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.IndexOutOfRangeExceptionHandler.IfIsLess``1(``0,``0)">
            <summary>
              Throws <see cref="T:System.IndexOutOfRangeException"/> if <paramref name="argument1"/> is less
              than <paramref name="argument2"/>.
            </summary>
            <typeparam name="TArg">The type of the arguments.</typeparam>
            <param name="argument1">The left side argument.</param>
            <param name="argument2">The right side argument.</param>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.IndexOutOfRangeExceptionHandler.IfIsLess(System.IComparable,System.IComparable)">
            <summary>
              Throws <see cref="T:System.IndexOutOfRangeException"/> if <paramref name="argument1"/> is less
              than <paramref name="argument2"/>.
            </summary>
            <param name="argument1">The left side argument.</param>
            <param name="argument2">The right side argument.</param>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.IndexOutOfRangeExceptionHandler.IfIsLess``1(``0,``0,System.String)">
            <summary>
              Throws <see cref="T:System.IndexOutOfRangeException"/> if <paramref name="argument1"/> is less
              than <paramref name="argument2"/>.
            </summary>
            <typeparam name="TArg">The type of the arguments.</typeparam>
            <param name="argument1">The left side argument.</param>
            <param name="argument2">The right side argument.</param>
            <param name="message">The message that should be put into the exception.</param>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.IndexOutOfRangeExceptionHandler.IfIsLess(System.IComparable,System.IComparable,System.String)">
            <summary>
              Throws <see cref="T:System.IndexOutOfRangeException"/> if <paramref name="argument1"/> is less
              than <paramref name="argument2"/>.
            </summary>
            <param name="argument1">The left side argument.</param>
            <param name="argument2">The right side argument.</param>
            <param name="message">The message that should be put into the exception.</param>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.IndexOutOfRangeExceptionHandler.IfIsLessOrEqual``1(``0,``0)">
            <summary>
              Throws <see cref="T:System.IndexOutOfRangeException"/> if <paramref name="argument1"/> is less
              than or equal to <paramref name="argument2"/>.
            </summary>
            <typeparam name="TArg">The type of the arguments.</typeparam>
            <param name="argument1">The left side argument.</param>
            <param name="argument2">The right side argument.</param>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.IndexOutOfRangeExceptionHandler.IfIsLessOrEqual(System.IComparable,System.IComparable)">
            <summary>
              Throws <see cref="T:System.IndexOutOfRangeException"/> if <paramref name="argument1"/> is less
              than or equal to <paramref name="argument2"/>.
            </summary>
            <param name="argument1">The left side argument.</param>
            <param name="argument2">The right side argument.</param>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.IndexOutOfRangeExceptionHandler.IfIsLessOrEqual``1(``0,``0,System.String)">
            <summary>
              Throws <see cref="T:System.IndexOutOfRangeException"/> if <paramref name="argument1"/> is less
              than or equal to <paramref name="argument2"/>.
            </summary>
            <typeparam name="TArg">The type of the arguments.</typeparam>
            <param name="argument1">The left side argument.</param>
            <param name="argument2">The right side argument.</param>
            <param name="message">The message that should be put into the exception.</param>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.IndexOutOfRangeExceptionHandler.IfIsLessOrEqual(System.IComparable,System.IComparable,System.String)">
            <summary>
              Throws <see cref="T:System.IndexOutOfRangeException"/> if <paramref name="argument1"/> is less
              than or equal to <paramref name="argument2"/>.
            </summary>
            <param name="argument1">The left side argument.</param>
            <param name="argument2">The right side argument.</param>
            <param name="message">The message that should be put into the exception.</param>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.IndexOutOfRangeExceptionHandler.IfIsGreater``1(``0,``0)">
            <summary>
              Throws <see cref="T:System.IndexOutOfRangeException"/> if <paramref name="argument1"/> is
              greater than <paramref name="argument2"/>.
            </summary>
            <typeparam name="TArg">The type of the arguments.</typeparam>
            <param name="argument1">The left side argument.</param>
            <param name="argument2">The right side argument.</param>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.IndexOutOfRangeExceptionHandler.IfIsGreater(System.IComparable,System.IComparable)">
            <summary>
              Throws <see cref="T:System.IndexOutOfRangeException"/> if <paramref name="argument1"/> is
              greater than <paramref name="argument2"/>.
            </summary>
            <param name="argument1">The left side argument.</param>
            <param name="argument2">The right side argument.</param>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.IndexOutOfRangeExceptionHandler.IfIsGreater``1(``0,``0,System.String)">
            <summary>
              Throws <see cref="T:System.IndexOutOfRangeException"/> if <paramref name="argument1"/> is
              greater than <paramref name="argument2"/>.
            </summary>
            <typeparam name="TArg">The type of the arguments.</typeparam>
            <param name="argument1">The left side argument.</param>
            <param name="argument2">The right side argument.</param>
            <param name="message">The message that should be put into the exception.</param>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.IndexOutOfRangeExceptionHandler.IfIsGreater(System.IComparable,System.IComparable,System.String)">
            <summary>
              Throws <see cref="T:System.IndexOutOfRangeException"/> if <paramref name="argument1"/> is
              greater than <paramref name="argument2"/>.
            </summary>
            <param name="argument1">The left side argument.</param>
            <param name="argument2">The right side argument.</param>
            <param name="message">The message that should be put into the exception.</param>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.IndexOutOfRangeExceptionHandler.IfIsGreaterOrEqual``1(``0,``0)">
            <summary>
              Throws <see cref="T:System.IndexOutOfRangeException"/> if <paramref name="argument1"/> is
              greater than or equal to <paramref name="argument2"/>.
            </summary>
            <typeparam name="TArg">The type of the arguments.</typeparam>
            <param name="argument1">The left side argument.</param>
            <param name="argument2">The right side argument.</param>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.IndexOutOfRangeExceptionHandler.IfIsGreaterOrEqual(System.IComparable,System.IComparable)">
            <summary>
              Throws <see cref="T:System.IndexOutOfRangeException"/> if <paramref name="argument1"/> is
              greater than or equal to <paramref name="argument2"/>.
            </summary>
            <param name="argument1">The left side argument.</param>
            <param name="argument2">The right side argument.</param>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.IndexOutOfRangeExceptionHandler.IfIsGreaterOrEqual``1(``0,``0,System.String)">
            <summary>
              Throws <see cref="T:System.IndexOutOfRangeException"/> if <paramref name="argument1"/> is
              greater than or equal to <paramref name="argument2"/>.
            </summary>
            <typeparam name="TArg">The type of the arguments.</typeparam>
            <param name="argument1">The left side argument.</param>
            <param name="argument2">The right side argument.</param>
            <param name="message">The message that should be put into the exception.</param>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.IndexOutOfRangeExceptionHandler.IfIsGreaterOrEqual(System.IComparable,System.IComparable,System.String)">
            <summary>
              Throws <see cref="T:System.IndexOutOfRangeException"/> if <paramref name="argument1"/> is
              greater than or equal to <paramref name="argument2"/>.
            </summary>
            <param name="argument1">The left side argument.</param>
            <param name="argument2">The right side argument.</param>
            <param name="message">The message that should be put into the exception.</param>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.IndexOutOfRangeExceptionHandler.IfIsEqual``1(``0,``0)">
            <summary>
              Throws <see cref="T:System.IndexOutOfRangeException"/> if <paramref name="argument1"/> is equal
              to <paramref name="argument2"/>.
            </summary>
            <typeparam name="TArg">The type of the arguments.</typeparam>
            <param name="argument1">The left side argument.</param>
            <param name="argument2">The right side argument.</param>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.IndexOutOfRangeExceptionHandler.IfIsEqual(System.IComparable,System.IComparable)">
            <summary>
              Throws <see cref="T:System.IndexOutOfRangeException"/> if <paramref name="argument1"/> is equal
              to <paramref name="argument2"/>.
            </summary>
            <param name="argument1">The left side argument.</param>
            <param name="argument2">The right side argument.</param>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.IndexOutOfRangeExceptionHandler.IfIsEqual``1(``0,``0,System.String)">
            <summary>
              Throws <see cref="T:System.IndexOutOfRangeException"/> if <paramref name="argument1"/> is equal
              to <paramref name="argument2"/>.
            </summary>
            <typeparam name="TArg">The type of the arguments.</typeparam>
            <param name="argument1">The left side argument.</param>
            <param name="argument2">The right side argument.</param>
            <param name="message">The message that should be put into the exception.</param>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.IndexOutOfRangeExceptionHandler.IfIsEqual(System.IComparable,System.IComparable,System.String)">
            <summary>
              Throws <see cref="T:System.IndexOutOfRangeException"/> if <paramref name="argument1"/> is equal
              to <paramref name="argument2"/>.
            </summary>
            <param name="argument1">The left side argument.</param>
            <param name="argument2">The right side argument.</param>
            <param name="message">The message that should be put into the exception.</param>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.IndexOutOfRangeExceptionHandler.IfIsNotEqual``1(``0,``0)">
            <summary>
              Throws <see cref="T:System.IndexOutOfRangeException"/> if <paramref name="argument1"/> is not
              equal to <paramref name="argument2"/>.
            </summary>
            <typeparam name="TArg">The type of the arguments.</typeparam>
            <param name="argument1">The left side argument.</param>
            <param name="argument2">The right side argument.</param>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.IndexOutOfRangeExceptionHandler.IfIsNotEqual(System.IComparable,System.IComparable)">
            <summary>
              Throws <see cref="T:System.IndexOutOfRangeException"/> if <paramref name="argument1"/> is not
              equal to <paramref name="argument2"/>.
            </summary>
            <param name="argument1">The left side argument.</param>
            <param name="argument2">The right side argument.</param>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.IndexOutOfRangeExceptionHandler.IfIsNotEqual``1(``0,``0,System.String)">
            <summary>
              Throws <see cref="T:System.IndexOutOfRangeException"/> if <paramref name="argument1"/> is not
              equal to <paramref name="argument2"/>.
            </summary>
            <typeparam name="TArg">The type of the arguments.</typeparam>
            <param name="argument1">The left side argument.</param>
            <param name="argument2">The right side argument.</param>
            <param name="message">The message that should be put into the exception.</param>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.IndexOutOfRangeExceptionHandler.IfIsNotEqual(System.IComparable,System.IComparable,System.String)">
            <summary>
              Throws <see cref="T:System.IndexOutOfRangeException"/> if <paramref name="argument1"/> is not
              equal to <paramref name="argument2"/>.
            </summary>
            <param name="argument1">The left side argument.</param>
            <param name="argument2">The right side argument.</param>
            <param name="message">The message that should be put into the exception.</param>
        </member>
        <member name="T:PommaLabs.Thrower.ExceptionHandlers.InvalidCastExceptionHandler">
            <summary>
              Handler for <see cref="T:System.InvalidCastException"/>.
            </summary>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.InvalidCastExceptionHandler.NewWithMessage(System.String)">
            <summary>
              Creates an exception with given message.
            </summary>
            <param name="message">The message used by the exception.</param>
            <returns>An exception with given message.</returns>
        </member>
        <member name="T:PommaLabs.Thrower.ExceptionHandlers.InvalidOperationExceptionHandler">
            <summary>
              Handler for <see cref="T:System.InvalidOperationException"/>.
            </summary>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.InvalidOperationExceptionHandler.NewWithMessage(System.String)">
            <summary>
              Creates an exception with given message.
            </summary>
            <param name="message">The message used by the exception.</param>
            <returns>An exception with given message.</returns>
        </member>
        <member name="T:PommaLabs.Thrower.ExceptionHandlers.IO.DirectoryNotFoundExceptionHandler">
            <summary>
              Handler for <see cref="T:System.IO.DirectoryNotFoundException"/>.
            </summary>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.IO.DirectoryNotFoundExceptionHandler.NewWithMessage(System.String)">
            <summary>
              Creates an exception with given message.
            </summary>
            <param name="message">The message used by the exception.</param>
            <returns>An exception with given message.</returns>
        </member>
        <member name="P:PommaLabs.Thrower.ExceptionHandlers.IO.DirectoryNotFoundExceptionHandler.DefaultNotExistsMessage">
            <summary>
              The default message for <see cref="M:PommaLabs.Thrower.ExceptionHandlers.IO.DirectoryNotFoundExceptionHandler.IfNotExists(System.String,System.String)"/>, used when none has
              been specified.
            </summary>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.IO.DirectoryNotFoundExceptionHandler.IfNotExists(System.String,System.String)">
            <summary>
              Throws <see cref="T:System.IO.DirectoryNotFoundException"/> if specified directory does not exist.
            </summary>
            <param name="directoryPath">The path of the directory that should exist.</param>
            <param name="message">The optional message.</param>
            <exception cref="T:System.IO.FileNotFoundException">If specified directory does not exist.</exception>
        </member>
        <member name="T:PommaLabs.Thrower.ExceptionHandlers.IO.FileNotFoundExceptionHandler">
            <summary>
              Handler for <see cref="T:System.IO.FileNotFoundException"/>.
            </summary>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.IO.FileNotFoundExceptionHandler.NewWithMessage(System.String)">
            <summary>
              Creates an exception with given message.
            </summary>
            <param name="message">The message used by the exception.</param>
            <returns>An exception with given message.</returns>
        </member>
        <member name="P:PommaLabs.Thrower.ExceptionHandlers.IO.FileNotFoundExceptionHandler.DefaultNotExistsMessage">
            <summary>
              The default message for <see cref="M:PommaLabs.Thrower.ExceptionHandlers.IO.FileNotFoundExceptionHandler.IfNotExists(System.String,System.String)"/>, used when none has
              been specified.
            </summary>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.IO.FileNotFoundExceptionHandler.IfNotExists(System.String,System.String)">
            <summary>
              Throws <see cref="T:System.IO.FileNotFoundException"/> if specified file does not exist or the
              caller does not have sufficient permissions to read the specified file.
            </summary>
            <param name="filePath">The path of the file that should exist.</param>
            <param name="message">The optional message.</param>
            <exception cref="T:System.IO.FileNotFoundException">
              If specified file does not exist or the caller does not have sufficient permissions to
              read the specified file.
            </exception>
        </member>
        <member name="T:PommaLabs.Thrower.ExceptionHandlers.IO.InvalidDataExceptionHandler">
            <summary>
              Handler for <see cref="T:System.IO.InvalidDataException"/>.
            </summary>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.IO.InvalidDataExceptionHandler.NewWithMessage(System.String)">
            <summary>
              Creates an exception with given message.
            </summary>
            <param name="message">The message used by the exception.</param>
            <returns>An exception with given message.</returns>
        </member>
        <member name="T:PommaLabs.Thrower.ExceptionHandlers.IO.IOExceptionHandler">
            <summary>
              Handler for <see cref="T:System.IO.IOException"/>.
            </summary>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.IO.IOExceptionHandler.NewWithMessage(System.String)">
            <summary>
              Creates an exception with given message.
            </summary>
            <param name="message">The message used by the exception.</param>
            <returns>An exception with given message.</returns>
        </member>
        <member name="T:PommaLabs.Thrower.ExceptionHandlers.Net.HttpExceptionHandler">
            <summary>
              Handler for <see cref="T:PommaLabs.Thrower.HttpException"/>.
            </summary>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.Net.HttpExceptionHandler.If(System.Boolean,System.Net.HttpStatusCode,System.String)">
            <summary>
              Throws <see cref="T:PommaLabs.Thrower.HttpException"/> if given condition is true.
            </summary>
            <param name="condition">The condition.</param>
            <param name="httpStatusCode">The HTTP status code corresponding to the error.</param>
            <param name="message">The optional message.</param>
            <exception cref="T:PommaLabs.Thrower.HttpException">If given condition is true.</exception>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.Net.HttpExceptionHandler.If(System.Boolean,System.Net.HttpStatusCode,System.String,PommaLabs.Thrower.HttpExceptionInfo)">
            <summary>
              Throws <see cref="T:PommaLabs.Thrower.HttpException"/> if given condition is true.
            </summary>
            <param name="condition">The condition.</param>
            <param name="httpStatusCode">The HTTP status code corresponding to the error.</param>
            <param name="message">The required message.</param>
            <param name="additionalInfo">Additional exception info.</param>
            <exception cref="T:PommaLabs.Thrower.HttpException">If given condition is true.</exception>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.Net.HttpExceptionHandler.IfNot(System.Boolean,System.Net.HttpStatusCode,System.String)">
            <summary>
              Throws <see cref="T:PommaLabs.Thrower.HttpException"/> if given condition is false.
            </summary>
            <param name="condition">The condition.</param>
            <param name="httpStatusCode">The HTTP status code corresponding to the error.</param>
            <param name="message">The optional message.</param>
            <exception cref="T:PommaLabs.Thrower.HttpException">If given condition is false.</exception>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.Net.HttpExceptionHandler.IfNot(System.Boolean,System.Net.HttpStatusCode,System.String,PommaLabs.Thrower.HttpExceptionInfo)">
            <summary>
              Throws <see cref="T:PommaLabs.Thrower.HttpException"/> if given condition is false.
            </summary>
            <param name="condition">The condition.</param>
            <param name="httpStatusCode">The HTTP status code corresponding to the error.</param>
            <param name="message">The required message.</param>
            <param name="additionalInfo">Additional exception info.</param>
            <exception cref="T:PommaLabs.Thrower.HttpException">If given condition is false.</exception>
        </member>
        <member name="T:PommaLabs.Thrower.ExceptionHandlers.NotSupportedExceptionHandler">
            <summary>
              Handler for <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.NotSupportedExceptionHandler.NewWithMessage(System.String)">
            <summary>
              Creates an exception with given message.
            </summary>
            <param name="message">The message used by the exception.</param>
            <returns>An exception with given message.</returns>
        </member>
        <member name="T:PommaLabs.Thrower.ExceptionHandlers.ObjectDisposedExceptionHandler">
            <summary>
              Handler for <see cref="T:System.ObjectDisposedException"/>.
            </summary>
        </member>
        <member name="M:PommaLabs.Thrower.ExceptionHandlers.ObjectDisposedExceptionHandler.If(System.Boolean,System.String,System.String)">
            <summary>
              Throws <see cref="T:System.ObjectDisposedException"/> if the object has been disposed.
            </summary>
            <param name="disposed">Whether the object has been disposed or not.</param>
            <param name="objectName">The required object name.</param>
            <param name="message">The optional message.</param>
            <exception cref="T:System.ObjectDisposedException">If the object has been disposed.</exception>
        </member>
        <member name="T:PommaLabs.Thrower.Goodies.EnvironmentExtensions">
            <summary>
              Portable extensions for <see cref="T:System.Environment"/>.
            </summary>
        </member>
        <member name="P:PommaLabs.Thrower.Goodies.EnvironmentExtensions.AppIsRunningOnAspNet">
            <summary>
              Gets a value indicating whether this application is running on ASP.NET.
            </summary>
            <value><c>true</c> if this application is running on ASP.NET; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:PommaLabs.Thrower.Goodies.EnvironmentExtensions.MapPath(System.String)">
            <summary>
              Maps given path into an absolute one.
            </summary>
            <param name="path">The path.</param>
            <returns>Given path mapped into an absolute one.</returns>
        </member>
        <member name="T:PommaLabs.Thrower.Goodies.EquatableObject`1">
            <summary>
              Implements some common <see cref="T:System.Object"/> methods, like
              <see cref="M:System.IEquatable`1.Equals(`0)"/> and <see cref="M:System.Object.ToString"/>, so that you don't
              have to copy and paste the same boilerplate code.
            </summary>
            <typeparam name="T">The type of the object inheriting this class.</typeparam>
        </member>
        <member name="F:PommaLabs.Thrower.Goodies.EquatableObject`1.HashCodeSeed">
            <summary>
              Seed used to compute hash code.
            </summary>
        </member>
        <member name="M:PommaLabs.Thrower.Goodies.EquatableObject`1.GetIdentifyingMembers">
            <summary>
              Returns all property (or field) values that should be used inside
              <see cref="M:System.IEquatable`1.Equals(`0)"/> or <see cref="M:System.Object.GetHashCode"/>.
            </summary>
            <returns>
              All property (or field) values that should be used inside
              <see cref="M:System.IEquatable`1.Equals(`0)"/> or <see cref="M:System.Object.GetHashCode"/>.
            </returns>
        </member>
        <member name="M:PommaLabs.Thrower.Goodies.EquatableObject`1.Equals(`0)">
            <summary>
              Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
              true if the current object is equal to the <paramref name="other"/> parameter;
              otherwise, false.
            </returns>
        </member>
        <member name="M:PommaLabs.Thrower.Goodies.EquatableObject`1.Equals(System.Object)">
            <summary>
              Determines whether the specified <see cref="T:System.Object"/>, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance;
              otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:PommaLabs.Thrower.Goodies.EquatableObject`1.GetHashCode">
            <summary>
              Returns a hash code for this instance.
            </summary>
            <returns>
              A hash code for this instance, suitable for use in hashing algorithms and data
              structures like a hash table.
            </returns>
        </member>
        <member name="M:PommaLabs.Thrower.Goodies.EquatableObject`1.op_Equality(PommaLabs.Thrower.Goodies.EquatableObject{`0},PommaLabs.Thrower.Goodies.EquatableObject{`0})">
            <summary>
              Implements the operator ==, by checking equality of left and right.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:PommaLabs.Thrower.Goodies.EquatableObject`1.op_Inequality(PommaLabs.Thrower.Goodies.EquatableObject{`0},PommaLabs.Thrower.Goodies.EquatableObject{`0})">
            <summary>
              Implements the operator !=, by checking equality of left and right.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="T:PommaLabs.Thrower.Goodies.FormattableObject">
            <summary>
              Implements a simple <see cref="M:System.Object.ToString"/>, so that you don't have to copy and paste
              the same boilerplate code over and over again.
            </summary>
        </member>
        <member name="M:PommaLabs.Thrower.Goodies.FormattableObject.GetFormattingMembers">
            <summary>
              Returns all property (or field) values, along with their names, so that they can be
              used to produce a meaningful <see cref="M:System.Object.ToString"/>.
            </summary>
            <returns>
              All property (or field) values, along with their names, so that they can be used to
              produce a meaningful <see cref="M:System.Object.ToString"/>.
            </returns>
        </member>
        <member name="M:PommaLabs.Thrower.Goodies.FormattableObject.ToString">
            <summary>
              Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="M:PommaLabs.Thrower.Goodies.FormattableObject.ToString(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
              Formats given key-value pair in order to use it for <see cref="M:System.Object.ToString"/>.
            </summary>
            <param name="pair">Key-value pair.</param>
            <returns>Formatted key-value pair.</returns>
        </member>
        <member name="T:PommaLabs.Thrower.Goodies.StringExtensions">
            <summary>
              Extension methods for <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="F:PommaLabs.Thrower.Goodies.StringExtensions.NoSubstrings">
            <summary>
              Returned when there are no substrings.
            </summary>
        </member>
        <member name="M:PommaLabs.Thrower.Goodies.StringExtensions.Truncate(System.String,System.Int32)">
            <summary>
              Truncates given string if its length is greater than specified <paramref name="maxLength"/>.
            </summary>
            <param name="str">The string to be truncated.</param>
            <param name="maxLength">The length at which string should be truncated.</param>
            <returns>The first <paramref name="maxLength"/> characters of <paramref name="str"/>.</returns>
        </member>
        <member name="M:PommaLabs.Thrower.Goodies.StringExtensions.SplitAndTrim(System.String,System.Char[])">
            <summary>
              Returns a string array that contains the substrings in this string that are delimited
              by elements of a specified Unicode character array. Substrings are trimmed before being
              returned to the caller.
            </summary>
            <param name="str">The string that should be split.</param>
            <param name="separator">
              An array of Unicode characters that delimit the substrings in this string, an empty
              array that contains no delimiters, or null.
            </param>
            <returns>
              A string array that contains the substrings in this string that are delimited by
              elements of a specified Unicode character array. Substrings are trimmed before being
              returned to the caller.
            </returns>
        </member>
        <member name="M:PommaLabs.Thrower.Goodies.StringExtensions.SplitAndTrim(System.String,System.String[])">
            <summary>
              Returns a string array that contains the substrings in this string that are delimited
              by elements of a specified string array. Substrings are trimmed before being returned
              to the caller.
            </summary>
            <param name="str">The string that should be split.</param>
            <param name="separator">
              An array of strings that delimit the substrings in this string, an empty array that
              contains no delimiters, or null.
            </param>
            <returns>
              A string array that contains the substrings in this string that are delimited by
              elements of a specified string array. Substrings are trimmed before being returned to
              the caller.
            </returns>
        </member>
        <member name="M:PommaLabs.Thrower.Goodies.StringExtensions.ToEnum``1(System.String,System.Boolean)">
            <summary>
              Converts given string into the specified enumeration value, applying the specified
              filter on casing.
            </summary>
            <typeparam name="TEnum">The type of the enumeration.</typeparam>
            <param name="enumString">The string value of one enumeration value.</param>
            <param name="ignoreCase">Whether to consider casing or not while parsing the string.</param>
            <returns>An enumeration value parsed from given string.</returns>
            <exception cref="T:System.InvalidOperationException">
              Given type parameter <typeparamref name="TEnum"/> is not an enum.
            </exception>
            <exception cref="T:System.ArgumentException">
              Given value cannot be mapped to any enum value.
            </exception>
        </member>
        <member name="M:PommaLabs.Thrower.Goodies.StringExtensions.ToEnum``1(System.String)">
            <summary>
              Converts given string into the specified enumeration value.
            </summary>
            <typeparam name="TEnum">The type of the enumeration.</typeparam>
            <param name="enumString">The string value of one enumeration value.</param>
            <returns>An enumeration value parsed from given string.</returns>
            <exception cref="T:System.InvalidOperationException">
              Given type parameter <typeparamref name="TEnum"/> is not an enum.
            </exception>
            <exception cref="T:System.ArgumentException">
              Given value cannot be mapped to any enum value.
            </exception>
        </member>
        <member name="M:PommaLabs.Thrower.Goodies.StringExtensions.ToEnumOrDefault``1(System.String,System.Boolean)">
            <summary>
              Converts given string into the specified enumeration value, applying the specified
              filter on casing. If given string cannot be mapped to any enum value, then default
              value for <typeparamref name="TEnum"/> is returned.
            </summary>
            <typeparam name="TEnum">The type of the enumeration.</typeparam>
            <param name="enumString">The string value of one enumeration value.</param>
            <param name="ignoreCase">Whether to consider casing or not while parsing the string.</param>
            <returns>
              An enumeration value parsed from given string or default enum value if that is not possible.
            </returns>
            <exception cref="T:System.InvalidOperationException">
              Given type parameter <typeparamref name="TEnum"/> is not an enum.
            </exception>
        </member>
        <member name="M:PommaLabs.Thrower.Goodies.StringExtensions.ToEnumOrDefault``1(System.String)">
            <summary>
              Converts given string into the specified enumeration value. If given string cannot be
              mapped to any enum value, then default value for <typeparamref name="TEnum"/> is returned.
            </summary>
            <typeparam name="TEnum">The type of the enumeration.</typeparam>
            <param name="enumString">The string value of one enumeration value.</param>
            <returns>
              An enumeration value parsed from given string or default enum value if that is not possible.
            </returns>
            <exception cref="T:System.InvalidOperationException">
              Given type parameter <typeparamref name="TEnum"/> is not an enum.
            </exception>
        </member>
        <member name="T:PommaLabs.Thrower.HttpExceptionInfo">
            <summary>
              Additional info which will be included into <see cref="T:PommaLabs.Thrower.HttpException"/>.
            </summary>
        </member>
        <member name="M:PommaLabs.Thrower.HttpExceptionInfo.#ctor(System.Object,System.String)">
            <summary>
              Builds the additional exception info.
            </summary>
            <param name="errorCode">The application defined error code.</param>
            <param name="userMessage">The user message.</param>
        </member>
        <member name="P:PommaLabs.Thrower.HttpExceptionInfo.ErrorCode">
            <summary>
              The application defined error code.
            </summary>
        </member>
        <member name="P:PommaLabs.Thrower.HttpExceptionInfo.UserMessage">
            <summary>
              An error message which can be shown to user.
            </summary>
        </member>
        <member name="M:PommaLabs.Thrower.HttpExceptionInfo.op_Inequality(PommaLabs.Thrower.HttpExceptionInfo,PommaLabs.Thrower.HttpExceptionInfo)">
            <summary>
              Compares two info.
            </summary>
            <param name="info1">Left info.</param>
            <param name="info2">Right info.</param>
            <returns>True if they are not equal, false otherwise.</returns>
        </member>
        <member name="M:PommaLabs.Thrower.HttpExceptionInfo.op_Equality(PommaLabs.Thrower.HttpExceptionInfo,PommaLabs.Thrower.HttpExceptionInfo)">
            <summary>
              Compares two info.
            </summary>
            <param name="info1">Left info.</param>
            <param name="info2">Right info.</param>
            <returns>True if they are equal, false otherwise.</returns>
        </member>
        <member name="M:PommaLabs.Thrower.HttpExceptionInfo.Equals(System.Object)">
            <summary>
              Indicates whether this instance and a specified object are equal.
            </summary>
            <returns>
              true if <paramref name="obj"/> and this instance are the same type and represent the
              same value; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current instance.</param>
        </member>
        <member name="M:PommaLabs.Thrower.HttpExceptionInfo.Equals(PommaLabs.Thrower.HttpExceptionInfo)">
            <summary>
              Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
              true if the current object is equal to the <paramref name="other"/> parameter;
              otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:PommaLabs.Thrower.HttpExceptionInfo.GetHashCode">
            <summary>
              Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:PommaLabs.Thrower.HttpException">
            <summary>
              Represents an exception which contains an error message that should be delivered through
              the HTTP response, using given status code.
            </summary>
        </member>
        <member name="M:PommaLabs.Thrower.HttpException.#ctor(System.Net.HttpStatusCode)">
            <summary>
              Builds the exception using given status code.
            </summary>
            <param name="httpStatusCode">The HTTP status code.</param>
        </member>
        <member name="M:PommaLabs.Thrower.HttpException.#ctor(System.Net.HttpStatusCode,PommaLabs.Thrower.HttpExceptionInfo)">
            <summary>
              Builds the exception using given status code.
            </summary>
            <param name="httpStatusCode">The HTTP status code.</param>
            <param name="additionalInfo">Additional exception info.</param>
        </member>
        <member name="M:PommaLabs.Thrower.HttpException.#ctor(System.Net.HttpStatusCode,System.String)">
            <summary>
              Builds the exception using given status code and message.
            </summary>
            <param name="httpStatusCode">The HTTP status code.</param>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:PommaLabs.Thrower.HttpException.#ctor(System.Net.HttpStatusCode,System.String,PommaLabs.Thrower.HttpExceptionInfo)">
            <summary>
              Builds the exception using given status code, message and error code.
            </summary>
            <param name="httpStatusCode">The HTTP status code.</param>
            <param name="message">The exception message.</param>
            <param name="additionalInfo">Additional exception info.</param>
        </member>
        <member name="M:PommaLabs.Thrower.HttpException.#ctor(System.Net.HttpStatusCode,System.String,System.Exception)">
            <summary>
              Builds the exception using given status code, message and inner exception.
            </summary>
            <param name="httpStatusCode">The HTTP status code.</param>
            <param name="message">The exception message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:PommaLabs.Thrower.HttpException.#ctor(System.Net.HttpStatusCode,System.String,System.Exception,PommaLabs.Thrower.HttpExceptionInfo)">
            <summary>
              Builds the exception using given status code, message, error code and inner exception.
            </summary>
            <param name="httpStatusCode">The HTTP status code.</param>
            <param name="message">The exception message.</param>
            <param name="innerException">The inner exception.</param>
            <param name="additionalInfo">Additional exception info.</param>
        </member>
        <member name="P:PommaLabs.Thrower.HttpException.HttpStatusCode">
            <summary>
              The HTTP status code assigned to this exception.
            </summary>
        </member>
        <member name="P:PommaLabs.Thrower.HttpException.ErrorCode">
            <summary>
              The application defined error code.
            </summary>
        </member>
        <member name="P:PommaLabs.Thrower.HttpException.DefaultErrorCode">
            <summary>
              The default application defined error code, used when none has been specified.
            </summary>
        </member>
        <member name="P:PommaLabs.Thrower.HttpException.UserMessage">
            <summary>
              An error message which can be shown to the user.
            </summary>
        </member>
        <member name="P:PommaLabs.Thrower.HttpException.DefaultUserMessage">
            <summary>
              The default user message.
            </summary>
        </member>
        <member name="T:PommaLabs.Thrower.Logging.ILog">
            <summary>
              Simple interface that represent a logger.
            </summary>
        </member>
        <member name="M:PommaLabs.Thrower.Logging.ILog.Log(PommaLabs.Thrower.Logging.LogLevel,System.Func{System.String},System.Exception,System.Object[])">
             <summary>
               Log a message the specified log level.
             </summary>
             <param name="logLevel">The log level.</param>
             <param name="messageFunc">The message function.</param>
             <param name="exception">An optional exception.</param>
             <param name="formatParameters">
               Optional format parameters for the message generated by the messagefunc.
             </param>
             <returns>true if the message was logged. Otherwise false.</returns>
             <remarks>
               Note to implementers: the message func should not be called if the loglevel is not
               enabled so as not to incur performance penalties.
            
               To check IsEnabled call Log with only LogLevel and check the return value, no event
               will be written.
             </remarks>
        </member>
        <member name="T:PommaLabs.Thrower.Logging.LogLevel">
            <summary>
              The log level.
            </summary>
        </member>
        <member name="T:PommaLabs.Thrower.Logging.ILogProvider">
            <summary>
              Represents a way to get a <see cref="T:PommaLabs.Thrower.Logging.ILog"/>
            </summary>
        </member>
        <member name="M:PommaLabs.Thrower.Logging.ILogProvider.GetLogger(System.String)">
            <summary>
              Gets the specified named logger.
            </summary>
            <param name="name">Name of the logger.</param>
            <returns>The logger reference.</returns>
        </member>
        <member name="M:PommaLabs.Thrower.Logging.ILogProvider.OpenNestedContext(System.String)">
            <summary>
              Opens a nested diagnostics context. Not supported in EntLib logging.
            </summary>
            <param name="message">The message to add to the diagnostics context.</param>
            <returns>A disposable that when disposed removes the message from the context.</returns>
        </member>
        <member name="M:PommaLabs.Thrower.Logging.ILogProvider.OpenMappedContext(System.String,System.String)">
            <summary>
              Opens a mapped diagnostics context. Not supported in EntLib logging.
            </summary>
            <param name="key">A key.</param>
            <param name="value">A value.</param>
            <returns>A disposable that when disposed removes the map from the context.</returns>
        </member>
        <member name="T:PommaLabs.Thrower.Logging.LogProvider">
            <summary>
              Provides a mechanism to create instances of <see cref="T:PommaLabs.Thrower.Logging.ILog"/> objects.
            </summary>
        </member>
        <member name="M:PommaLabs.Thrower.Logging.LogProvider.SetCurrentLogProvider(PommaLabs.Thrower.Logging.ILogProvider)">
            <summary>
              Sets the current log provider.
            </summary>
            <param name="logProvider">The log provider.</param>
        </member>
        <member name="P:PommaLabs.Thrower.Logging.LogProvider.IsDisabled">
            <summary>
              Gets or sets a value indicating whether this is logging is disabled.
            </summary>
            <value><c>true</c> if logging is disabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:PommaLabs.Thrower.Logging.LogProvider.OnCurrentLogProviderSet">
            <summary>
              Sets an action that is invoked when a consumer of your library has called
              SetCurrentLogProvider. It is important that hook into this if you are using child
              libraries (especially ilmerged ones) that are using LibLog (or other logging
              abstraction) so you adapt and delegate to them. <see cref="M:PommaLabs.Thrower.Logging.LogProvider.SetCurrentLogProvider(PommaLabs.Thrower.Logging.ILogProvider)"/>
            </summary>
        </member>
        <member name="M:PommaLabs.Thrower.Logging.LogProvider.For``1">
            <summary>
              Gets a logger for the specified type.
            </summary>
            <typeparam name="T">The type whose name will be used for the logger.</typeparam>
            <returns>An instance of <see cref="T:PommaLabs.Thrower.Logging.ILog"/></returns>
        </member>
        <member name="M:PommaLabs.Thrower.Logging.LogProvider.GetCurrentClassLogger">
            <summary>
              Gets a logger for the current class.
            </summary>
            <returns>An instance of <see cref="T:PommaLabs.Thrower.Logging.ILog"/></returns>
        </member>
        <member name="M:PommaLabs.Thrower.Logging.LogProvider.GetLogger(System.Type,System.String)">
            <summary>
              Gets a logger for the specified type.
            </summary>
            <param name="type">The type whose name will be used for the logger.</param>
            <param name="fallbackTypeName">
              If the type is null then this name will be used as the log name instead
            </param>
            <returns>An instance of <see cref="T:PommaLabs.Thrower.Logging.ILog"/></returns>
        </member>
        <member name="M:PommaLabs.Thrower.Logging.LogProvider.GetLogger(System.String)">
            <summary>
              Gets a logger with the specified name.
            </summary>
            <param name="name">The name.</param>
            <returns>An instance of <see cref="T:PommaLabs.Thrower.Logging.ILog"/></returns>
        </member>
        <member name="M:PommaLabs.Thrower.Logging.LogProvider.OpenNestedContext(System.String)">
            <summary>
              Opens a nested diagnostics context.
            </summary>
            <param name="message">A message.</param>
            <returns>An <see cref="T:System.IDisposable"/> that closes context when disposed.</returns>
        </member>
        <member name="M:PommaLabs.Thrower.Logging.LogProvider.OpenMappedContext(System.String,System.String)">
            <summary>
              Opens a mapped diagnostics context.
            </summary>
            <param name="key">A key.</param>
            <param name="value">A value.</param>
            <returns>An <see cref="T:System.IDisposable"/> that closes context when disposed.</returns>
        </member>
        <member name="T:PommaLabs.Thrower.Logging.LogProviders.LoupeLogProvider.WriteDelegate">
            <summary>
              The form of the Loupe Log.Write method we're using
            </summary>
        </member>
        <member name="P:PommaLabs.Thrower.Logging.LogProviders.LoupeLogProvider.ProviderIsAvailableOverride">
            <summary>
              Gets or sets a value indicating whether [provider is available override]. Used in tests.
            </summary>
            <value><c>true</c> if [provider is available override]; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:PommaLabs.Thrower.Logging.LogProviders.LogMessageFormatter.SimulateStructuredLogging(System.Func{System.String},System.Object[])">
             <summary>
               Some logging frameworks support structured logging, such as serilog. This will allow
               you to add names to structured data in a format string: For example: Log("Log message
               to {user}", user). This only works with serilog, but as the user of LibLog, you don't
               know if serilog is actually used. So, this class simulates that. it will replace any
               text in {curly braces} with an index number.
            
               "Log {message} to {user}" would turn into =&gt; "Log {0} to {1}". Then the format
               parameters are handled using regular .net string.Format.
             </summary>
             <param name="messageBuilder">The message builder.</param>
             <param name="formatParameters">The format parameters.</param>
             <returns></returns>
        </member>
        <member name="T:PommaLabs.Thrower.Raise">
            <summary>
              New exception handling mechanism, which is more fluent than the old ones.
            </summary>
        </member>
        <member name="F:PommaLabs.Thrower.Raise.MethodImplOptions">
            <summary>
              Default implementation options for Raise methods.
            </summary>
        </member>
        <member name="P:PommaLabs.Thrower.Raise.ArgumentException">
            <summary>
              Handler for <see cref="T:System.ArgumentException"/>
            </summary>
        </member>
        <member name="P:PommaLabs.Thrower.Raise.ArgumentNullException">
            <summary>
              Handler for <see cref="T:System.ArgumentNullException"/>
            </summary>
        </member>
        <member name="P:PommaLabs.Thrower.Raise.ArgumentOutOfRangeException">
            <summary>
              Handler for <see cref="T:System.ArgumentOutOfRangeException"/>
            </summary>
        </member>
        <member name="P:PommaLabs.Thrower.Raise.IndexOutOfRangeException">
            <summary>
              Handler for <see cref="T:System.IndexOutOfRangeException"/>
            </summary>
        </member>
        <member name="P:PommaLabs.Thrower.Raise.InvalidCastException">
            <summary>
              Handler for <see cref="T:System.InvalidCastException"/>
            </summary>
        </member>
        <member name="P:PommaLabs.Thrower.Raise.InvalidOperationException">
            <summary>
              Handler for <see cref="T:System.InvalidOperationException"/>
            </summary>
        </member>
        <member name="P:PommaLabs.Thrower.Raise.NotSupportedException">
            <summary>
              Handler for <see cref="T:System.NotSupportedException"/>
            </summary>
        </member>
        <member name="P:PommaLabs.Thrower.Raise.ObjectDisposedException">
            <summary>
              Handler for <see cref="T:System.ObjectDisposedException"/>
            </summary>
        </member>
        <member name="P:PommaLabs.Thrower.Raise.DirectoryNotFoundException">
            <summary>
              Handler for <see cref="T:System.IO.DirectoryNotFoundException"/>
            </summary>
        </member>
        <member name="P:PommaLabs.Thrower.Raise.FileNotFoundException">
            <summary>
              Handler for <see cref="T:System.IO.FileNotFoundException"/>
            </summary>
        </member>
        <member name="P:PommaLabs.Thrower.Raise.InvalidDataException">
            <summary>
              Handler for <see cref="T:System.IO.InvalidDataException"/>
            </summary>
        </member>
        <member name="P:PommaLabs.Thrower.Raise.IOException">
            <summary>
              Handler for <see cref="T:System.IO.IOException"/>
            </summary>
        </member>
        <member name="P:PommaLabs.Thrower.Raise.HttpException">
            <summary>
              Handler for <see cref="P:PommaLabs.Thrower.Raise.HttpException"/>
            </summary>
        </member>
        <member name="T:PommaLabs.Thrower.RaiseBase">
            <summary>
              Stores items shared by various <see cref="T:PommaLabs.Thrower.Raise`1"/> instances.
            </summary>
        </member>
        <member name="F:PommaLabs.Thrower.RaiseBase.NoCtorParams">
            <summary>
              Stores an empty array of <see cref="T:System.Object"/> used to activate constructors without parameters.
            </summary>
        </member>
        <member name="F:PommaLabs.Thrower.RaiseBase.NoCtorTypes">
            <summary>
              Stores an empty array of <see cref="T:System.Type"/> used to seek constructors without parameters.
            </summary>
        </member>
        <member name="F:PommaLabs.Thrower.RaiseBase.StrExCtorTypes">
            <summary>
              Stores the types needed to seek the constructor which takes a string and an exception
              as parameters to instance the exception.
            </summary>
        </member>
        <member name="F:PommaLabs.Thrower.RaiseBase.StrCtorType">
            <summary>
              Stores the type needed to seek the constructor which takes a string as parameter to
              instance the exception.
            </summary>
        </member>
        <member name="T:PommaLabs.Thrower.Raise`1">
            <summary>
              Contains methods that throw specified exception <typeparamref name="TEx"/> if given
              conditions will be verified.
            </summary>
            <typeparam name="TEx">The type of the exceptions thrown if conditions will be satisfied.</typeparam>
            <remarks>
              In order to achieve a good speed, the class caches an instance of the constructors found
              via reflection; therefore, constructors are looked for only once.
            </remarks>
        </member>
        <member name="F:PommaLabs.Thrower.Raise`1.ExTypeIsAbstract">
            <summary>
              Stores wheter the exception type is abstract or not. We do this both to provide better
              error messages for the end user and to avoid calling wrong constructors.
            </summary>
        </member>
        <member name="F:PommaLabs.Thrower.Raise`1.NoArgsCtor">
            <summary>
              Caches an instance of the constructor which takes no arguments. If it does not exist,
              then this field will be null. There must be an instance for each type associated with <see cref="T:PommaLabs.Thrower.Raise`1"/>.
            </summary>
        </member>
        <member name="F:PommaLabs.Thrower.Raise`1.MsgCtor">
            <summary>
              Caches an instance of the constructor which creates an exception with a message. If it
              does not exist, then this field will be null. There must be an instance for each type
              associated with <see cref="T:PommaLabs.Thrower.Raise`1"/>.
            </summary>
            <remarks>
              At first, we look for constructors which take a string and an inner exception, because
              some standard exceptions (like ArgumentException or ArgumentNullException) have a
              constructor which takes a string as a "parameter name", not as a message. If a
              constructor with that signature is not found, then we look for a constructor with a
              string as the only argument.
            </remarks>
        </member>
        <member name="F:PommaLabs.Thrower.Raise`1.MsgArgCount">
            <summary>
              Keeps the number of arguments required by the constructor who creates the exception
              with a message.
            </summary>
        </member>
        <member name="M:PommaLabs.Thrower.Raise`1.#ctor">
            <summary>
              <see cref="T:PommaLabs.Thrower.Raise`1"/> must not be instanced.
            </summary>
        </member>
        <member name="M:PommaLabs.Thrower.Raise`1.If(System.Boolean)">
            <summary>
              Throws an exception of type <typeparamref name="TEx"/> if and only if specified
              condition is true.
            </summary>
            <param name="cond">The condition that determines whether an exception will be thrown.</param>
            <exception cref="T:PommaLabs.Thrower.ThrowerException">
              <typeparamref name="TEx"/> has not a public or internal constructor with no parameters,
              or <typeparamref name="TEx"/> is abstract.
            </exception>
            <remarks>
              If <paramref name="cond"/> is true, then an exception of type
              <typeparamref name="TEx"/> will be thrown. <br/> In order to do that,
              <typeparamref name="TEx"/> must have a constructor which doesn't take any arguments.
            </remarks>
        </member>
        <member name="M:PommaLabs.Thrower.Raise`1.If(System.Boolean,System.String)">
            <summary>
              Throws an exception of type <typeparamref name="TEx"/> with given message
              <paramref name="message"/> if and only if specified condition is true.
            </summary>
            <param name="cond">The condition that determines whether an exception will be thrown.</param>
            <param name="message">The message the thrown exception will have.</param>
            <exception cref="T:PommaLabs.Thrower.ThrowerException">
              <typeparamref name="TEx"/> has not a public or internal constructor which takes, as
              parameters, either a <see cref="T:System.String"/> or a <see cref="T:System.String"/> and an
              <see cref="T:System.Exception"/>. The same exception is thrown when
              <typeparamref name="TEx"/> is abstract.
            </exception>
            <remarks>
              If <paramref name="cond"/> is true, then an exception of type
              <typeparamref name="TEx"/>, with the message specified by <paramref name="message"/>,
              will be thrown. <br/> In order to do that, <typeparamref name="TEx"/> must have either
              a constructor which takes a <see cref="T:System.String"/> and an <see cref="T:System.Exception"/>
              as arguments, or a constructor which takes a <see cref="T:System.String"/> as only parameter.
              <br/> If both constructors are available, then the one which takes a
              <see cref="T:System.String"/> and an <see cref="T:System.Exception"/> will be used to throw the exception.
            </remarks>
        </member>
        <member name="M:PommaLabs.Thrower.Raise`1.If(System.Boolean,System.Object,System.Object[])">
            <summary>
              Throws an exception of type <typeparamref name="TEx"/> if and only if specified
              condition is true.
            </summary>
            <param name="cond">The condition that determines whether an exception will be thrown.</param>
            <param name="firstParam">
              The first parameter that will be used for the exception constructor, if needed.
            </param>
            <param name="otherParams">
              Other parameters that will be used for the exception constructor, if needed.
            </param>
            <exception cref="T:PommaLabs.Thrower.ThrowerException">
              <typeparamref name="TEx"/> has not a public or internal constructor with specified
              parameters, or <typeparamref name="TEx"/> is abstract.
            </exception>
            <remarks>
              If <paramref name="cond"/> is true, then an exception of type
              <typeparamref name="TEx"/> will be thrown. <br/> In order to do that,
              <typeparamref name="TEx"/> must have a constructor which takes specified arguments.
              Moreover, each specified argument must not be null, otherwise type inference will fail.
            </remarks>
        </member>
        <member name="M:PommaLabs.Thrower.Raise`1.IfNot(System.Boolean)">
            <summary>
              Throws an exception of type <typeparamref name="TEx"/> if and only if specified
              condition is false.
            </summary>
            <param name="cond">The condition that determines whether an exception will be thrown.</param>
            <exception cref="T:PommaLabs.Thrower.ThrowerException">
              <typeparamref name="TEx"/> has not a public or internal constructor with no parameters,
              or <typeparamref name="TEx"/> is abstract.
            </exception>
            <remarks>
              If <paramref name="cond"/> is false, then an exception of type
              <typeparamref name="TEx"/> will be thrown. <br/> In order to do that,
              <typeparamref name="TEx"/> must have a constructor which doesn't take any arguments.
            </remarks>
        </member>
        <member name="M:PommaLabs.Thrower.Raise`1.IfNot(System.Boolean,System.String)">
            <summary>
              Throws an exception of type <typeparamref name="TEx"/> with given message
              <paramref name="message"/> if and only if specified condition is false.
            </summary>
            <param name="cond">The condition that determines whether an exception will be thrown.</param>
            <param name="message">The message the thrown exception will have.</param>
            <exception cref="T:PommaLabs.Thrower.ThrowerException">
              <typeparamref name="TEx"/> has not a public or internal constructor which takes, as
              parameters, either a <see cref="T:System.String"/> or a <see cref="T:System.String"/> and an
              <see cref="T:System.Exception"/>. The same exception is thrown when
              <typeparamref name="TEx"/> is abstract.
            </exception>
            <remarks>
              If <paramref name="cond"/> is false, then an exception of type
              <typeparamref name="TEx"/>, with the message specified by <paramref name="message"/>,
              will be thrown. <br/> In order to do that, <typeparamref name="TEx"/> must have either
              a constructor which takes a <see cref="T:System.String"/> and an <see cref="T:System.Exception"/>
              as arguments, or a constructor which takes a <see cref="T:System.String"/> as only parameter.
              <br/> If both constructors are available, then the one which takes a
              <see cref="T:System.String"/> and an <see cref="T:System.Exception"/> will be used to throw the exception.
            </remarks>
        </member>
        <member name="M:PommaLabs.Thrower.Raise`1.IfNot(System.Boolean,System.Object,System.Object[])">
            <summary>
              Throws an exception of type <typeparamref name="TEx"/> if and only if specified
              condition is false.
            </summary>
            <param name="cond">The condition that determines whether an exception will be thrown.</param>
            <param name="firstParam">
              The first parameter that will be used for the exception constructor, if needed.
            </param>
            <param name="otherParams">
              Other parameters that will be used for the exception constructor, if needed.
            </param>
            <exception cref="T:PommaLabs.Thrower.ThrowerException">
              <typeparamref name="TEx"/> has not a public or internal constructor with specified
              parameters, or <typeparamref name="TEx"/> is abstract.
            </exception>
            <remarks>
              If <paramref name="cond"/> is false, then an exception of type
              <typeparamref name="TEx"/> will be thrown. <br/> In order to do that,
              <typeparamref name="TEx"/> must have a constructor which takes specified arguments.
              Moreover, each specified argument must not be null, otherwise type inference will fail.
            </remarks>
        </member>
        <member name="T:PommaLabs.Thrower.Reflection.FastMember.MemberSet">
            <summary>
              Represents an abstracted view of the members defined for a type.
            </summary>
        </member>
        <member name="M:PommaLabs.Thrower.Reflection.FastMember.MemberSet.GetEnumerator">
            <summary>
              Return a sequence of all defined members.
            </summary>
        </member>
        <member name="P:PommaLabs.Thrower.Reflection.FastMember.MemberSet.Item(System.Int32)">
            <summary>
              Get a member by index.
            </summary>
        </member>
        <member name="P:PommaLabs.Thrower.Reflection.FastMember.MemberSet.Count">
            <summary>
              The number of members defined for this type.
            </summary>
        </member>
        <member name="T:PommaLabs.Thrower.Reflection.FastMember.Member">
            <summary>
              Represents an abstracted view of an individual member defined for a type.
            </summary>
        </member>
        <member name="P:PommaLabs.Thrower.Reflection.FastMember.Member.Name">
            <summary>
              The name of this member.
            </summary>
        </member>
        <member name="P:PommaLabs.Thrower.Reflection.FastMember.Member.Type">
            <summary>
              The type of value stored in this member.
            </summary>
        </member>
        <member name="M:PommaLabs.Thrower.Reflection.FastMember.Member.IsDefined(System.Type)">
            <summary>
              Is the attribute specified defined on this type?
            </summary>
            <param name="attributeType">The attribute type.</param>
        </member>
        <member name="M:PommaLabs.Thrower.Reflection.FastMember.Member.GetAttribute(System.Type,System.Boolean)">
            <summary>
              Gets attribute type.
            </summary>
            <param name="attributeType">The attribute type.</param>
            <param name="inherit">
              If true, specifies to also search the ancestors of element for custom attributes.
            </param>
        </member>
        <member name="P:PommaLabs.Thrower.Reflection.FastMember.Member.CanWrite">
            <summary>
              Property can write?
            </summary>
        </member>
        <member name="P:PommaLabs.Thrower.Reflection.FastMember.Member.CanRead">
            <summary>
              Property can read?
            </summary>
        </member>
        <member name="T:PommaLabs.Thrower.Reflection.FastMember.ObjectAccessor">
            <summary>
              Represents an individual object, allowing access to members by-name.
            </summary>
        </member>
        <member name="P:PommaLabs.Thrower.Reflection.FastMember.ObjectAccessor.Item(System.String)">
            <summary>
              Get or Set the value of a named member for the underlying object.
            </summary>
        </member>
        <member name="P:PommaLabs.Thrower.Reflection.FastMember.ObjectAccessor.Target">
            <summary>
              The object represented by this instance.
            </summary>
        </member>
        <member name="M:PommaLabs.Thrower.Reflection.FastMember.ObjectAccessor.Equals(System.Object)">
            <summary>
              Use the target types definition of equality.
            </summary>
            <param name="obj">The object.</param>
        </member>
        <member name="M:PommaLabs.Thrower.Reflection.FastMember.ObjectAccessor.GetHashCode">
            <summary>
              Obtain the hash of the target object.
            </summary>
        </member>
        <member name="M:PommaLabs.Thrower.Reflection.FastMember.ObjectAccessor.ToString">
            <summary>
              Use the target's definition of a string representation.
            </summary>
        </member>
        <member name="M:PommaLabs.Thrower.Reflection.FastMember.ObjectAccessor.Create(System.Object)">
            <summary>
              Wraps an individual object, allowing by-name access to that instance.
            </summary>
            <param name="target">The target object.</param>
        </member>
        <member name="M:PommaLabs.Thrower.Reflection.FastMember.ObjectAccessor.Create(System.Object,System.Boolean)">
            <summary>
              Wraps an individual object, allowing by-name access to that instance.
            </summary>
            <param name="target">The target object.</param>
            <param name="allowNonPublicAccessors">Allow usage of non public accessors.</param>
        </member>
        <member name="P:PommaLabs.Thrower.Reflection.FastMember.ObjectAccessor.Keys">
            <summary>
              Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <returns>
              An <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys of the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </returns>
        </member>
        <member name="P:PommaLabs.Thrower.Reflection.FastMember.ObjectAccessor.Values">
            <summary>
              Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <returns>
              An <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values in the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </returns>
        </member>
        <member name="P:PommaLabs.Thrower.Reflection.FastMember.ObjectAccessor.Count">
            <summary>
              Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <returns>The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</returns>
        </member>
        <member name="P:PommaLabs.Thrower.Reflection.FastMember.ObjectAccessor.IsReadOnly">
            <summary>
              Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, false.</returns>
        </member>
        <member name="M:PommaLabs.Thrower.Reflection.FastMember.ObjectAccessor.ContainsKey(System.String)">
            <summary>
              Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with
              the specified key.
            </summary>
            <returns>
              true if the <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the key;
              otherwise, false.
            </returns>
            <param name="key">The key to locate in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.</exception>
        </member>
        <member name="M:PommaLabs.Thrower.Reflection.FastMember.ObjectAccessor.Add(System.String,System.Object)">
            <summary>
              Adds an element with the provided key and value to the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <param name="key">The object to use as the key of the element to add.</param>
            <param name="value">The object to use as the value of the element to add.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.</exception>
            <exception cref="T:System.ArgumentException">
              An element with the same key already exists in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
              The <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.
            </exception>
        </member>
        <member name="M:PommaLabs.Thrower.Reflection.FastMember.ObjectAccessor.Remove(System.String)">
            <summary>
              Removes the element with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <returns>
              true if the element is successfully removed; otherwise, false. This method also returns
              false if <paramref name="key"/> was not found in the original <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </returns>
            <param name="key">The key of the element to remove.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.</exception>
            <exception cref="T:System.NotSupportedException">
              The <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.
            </exception>
        </member>
        <member name="M:PommaLabs.Thrower.Reflection.FastMember.ObjectAccessor.TryGetValue(System.String,System.Object@)">
            <summary>
              Gets the value associated with the specified key.
            </summary>
            <returns>
              true if the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an
              element with the specified key; otherwise, false.
            </returns>
            <param name="key">The key whose value to get.</param>
            <param name="value">
              When this method returns, the value associated with the specified key, if the key is
              found; otherwise, the default value for the type of the <paramref name="value"/>
              parameter. This parameter is passed uninitialized.
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.</exception>
        </member>
        <member name="M:PommaLabs.Thrower.Reflection.FastMember.ObjectAccessor.Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
              Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <exception cref="T:System.NotSupportedException">
              The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </exception>
        </member>
        <member name="M:PommaLabs.Thrower.Reflection.FastMember.ObjectAccessor.Clear">
            <summary>
              Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">
              The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </exception>
        </member>
        <member name="M:PommaLabs.Thrower.Reflection.FastMember.ObjectAccessor.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
              Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <returns>
              true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>;
              otherwise, false.
            </returns>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
        </member>
        <member name="M:PommaLabs.Thrower.Reflection.FastMember.ObjectAccessor.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)">
            <summary>
              Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>,
              starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">
              The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied
              from <see cref="T:System.Collections.Generic.ICollection`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.
            </param>
            <param name="arrayIndex">
              The zero-based index in <paramref name="array"/> at which copying begins.
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="arrayIndex"/> is less than 0.
            </exception>
            <exception cref="T:System.ArgumentException">
              The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"/> is greater than the
              available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.
            </exception>
        </member>
        <member name="M:PommaLabs.Thrower.Reflection.FastMember.ObjectAccessor.Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
              Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <returns>
              true if <paramref name="item"/> was successfully removed from the
              <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if
              <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <exception cref="T:System.NotSupportedException">
              The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </exception>
        </member>
        <member name="M:PommaLabs.Thrower.Reflection.FastMember.ObjectAccessor.GetEnumerator">
            <summary>
              Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:PommaLabs.Thrower.Reflection.FastMember.ObjectAccessor.System#Collections#IEnumerable#GetEnumerator">
            <summary>
              Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
              An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:PommaLabs.Thrower.Reflection.FastMember.ObjectReader">
            <summary>
              Provides a means of reading a sequence of objects as a data-reader, for example for use
              with SqlBulkCopy or other data-base oriented code.
            </summary>
        </member>
        <member name="M:PommaLabs.Thrower.Reflection.FastMember.ObjectReader.Create``1(System.Collections.Generic.IEnumerable{``0},System.String[])">
            <summary>
              Creates a new ObjectReader instance for reading the supplied data.
            </summary>
            <param name="source">The sequence of objects to represent.</param>
            <param name="members">The members that should be exposed to the reader.</param>
        </member>
        <member name="M:PommaLabs.Thrower.Reflection.FastMember.ObjectReader.#ctor(System.Type,System.Collections.IEnumerable,System.String[])">
            <summary>
              Creates a new ObjectReader instance for reading the supplied data.
            </summary>
            <param name="type">The expected Type of the information to be read.</param>
            <param name="source">The sequence of objects to represent.</param>
            <param name="members">The members that should be exposed to the reader.</param>
        </member>
        <member name="P:PommaLabs.Thrower.Reflection.FastMember.ObjectReader.Depth">
            <summary>
              Gets a value indicating the depth of nesting for the current row.
            </summary>
            <returns>The depth of nesting for the current row.</returns>
        </member>
        <member name="M:PommaLabs.Thrower.Reflection.FastMember.ObjectReader.GetSchemaTable">
            <summary>
              Returns a <see cref="T:System.Data.DataTable"/> that describes the column metadata of the <see cref="T:System.Data.Common.DbDataReader"/>.
            </summary>
            <returns>A <see cref="T:System.Data.DataTable"/> that describes the column metadata.</returns>
            <exception cref="T:System.InvalidOperationException">
              The <see cref="T:System.Data.Common.DbDataReader"/> is closed.
            </exception>
        </member>
        <member name="M:PommaLabs.Thrower.Reflection.FastMember.ObjectReader.Close">
            <summary>
              Closes the <see cref="T:System.Data.Common.DbDataReader"/> object.
            </summary>
        </member>
        <member name="P:PommaLabs.Thrower.Reflection.FastMember.ObjectReader.HasRows">
            <summary>
              Gets a value that indicates whether this <see cref="T:System.Data.Common.DbDataReader"/> contains one or
              more rows.
            </summary>
            <returns>
              true if the <see cref="T:System.Data.Common.DbDataReader"/> contains one or more rows; otherwise false.
            </returns>
        </member>
        <member name="M:PommaLabs.Thrower.Reflection.FastMember.ObjectReader.NextResult">
            <summary>
              Advances the reader to the next result when reading the results of a batch of statements.
            </summary>
            <returns>true if there are more result sets; otherwise false.</returns>
        </member>
        <member name="M:PommaLabs.Thrower.Reflection.FastMember.ObjectReader.Read">
            <summary>
              Advances the reader to the next record in a result set.
            </summary>
            <returns>true if there are more rows; otherwise false.</returns>
        </member>
        <member name="P:PommaLabs.Thrower.Reflection.FastMember.ObjectReader.RecordsAffected">
            <summary>
              Gets the number of rows changed, inserted, or deleted by execution of the SQL statement.
            </summary>
            <returns>
              The number of rows changed, inserted, or deleted. -1 for SELECT statements; 0 if no
              rows were affected or the statement failed.
            </returns>
        </member>
        <member name="M:PommaLabs.Thrower.Reflection.FastMember.ObjectReader.Dispose(System.Boolean)">
            <summary>
              Releases the managed resources used by the <see cref="T:System.Data.Common.DbDataReader"/> and optionally
              releases the unmanaged resources.
            </summary>
            <param name="disposing">
              true to release managed and unmanaged resources; false to release only unmanaged resources.
            </param>
        </member>
        <member name="P:PommaLabs.Thrower.Reflection.FastMember.ObjectReader.FieldCount">
            <summary>
              Gets the number of columns in the current row.
            </summary>
            <returns>The number of columns in the current row.</returns>
            <exception cref="T:System.NotSupportedException">
              There is no current connection to an instance of SQL Server.
            </exception>
        </member>
        <member name="P:PommaLabs.Thrower.Reflection.FastMember.ObjectReader.IsClosed">
            <summary>
              Gets a value indicating whether the <see cref="T:System.Data.Common.DbDataReader"/> is closed.
            </summary>
            <returns>true if the <see cref="T:System.Data.Common.DbDataReader"/> is closed; otherwise false.</returns>
            <exception cref="T:System.InvalidOperationException">
              The <see cref="T:System.Data.Common.DbDataReader"/> is closed.
            </exception>
        </member>
        <member name="M:PommaLabs.Thrower.Reflection.FastMember.ObjectReader.GetBoolean(System.Int32)">
            <summary>
              Gets the value of the specified column as a Boolean.
            </summary>
            <returns>The value of the specified column.</returns>
            <param name="ordinal">The zero-based column ordinal.</param>
            <exception cref="T:System.InvalidCastException">The specified cast is not valid.</exception>
        </member>
        <member name="M:PommaLabs.Thrower.Reflection.FastMember.ObjectReader.GetByte(System.Int32)">
            <summary>
              Gets the value of the specified column as a byte.
            </summary>
            <returns>The value of the specified column.</returns>
            <param name="ordinal">The zero-based column ordinal.</param>
            <exception cref="T:System.InvalidCastException">The specified cast is not valid.</exception>
        </member>
        <member name="M:PommaLabs.Thrower.Reflection.FastMember.ObjectReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
              Reads a stream of bytes from the specified column, starting at location indicated by
              <paramref name="dataOffset"/>, into the buffer, starting at the location indicated by <paramref name="bufferOffset"/>.
            </summary>
            <returns>The actual number of bytes read.</returns>
            <param name="ordinal">The zero-based column ordinal.</param>
            <param name="dataOffset">The index within the row from which to begin the read operation.</param>
            <param name="buffer">The buffer into which to copy the data.</param>
            <param name="bufferOffset">The index with the buffer to which the data will be copied.</param>
            <param name="length">The maximum number of characters to read.</param>
            <exception cref="T:System.InvalidCastException">The specified cast is not valid.</exception>
        </member>
        <member name="M:PommaLabs.Thrower.Reflection.FastMember.ObjectReader.GetChar(System.Int32)">
            <summary>
              Gets the value of the specified column as a single character.
            </summary>
            <returns>The value of the specified column.</returns>
            <param name="ordinal">The zero-based column ordinal.</param>
            <exception cref="T:System.InvalidCastException">The specified cast is not valid.</exception>
        </member>
        <member name="M:PommaLabs.Thrower.Reflection.FastMember.ObjectReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
            <summary>
              Reads a stream of characters from the specified column, starting at location indicated
              by <paramref name="dataOffset"/>, into the buffer, starting at the location indicated
              by <paramref name="bufferOffset"/>.
            </summary>
            <returns>The actual number of characters read.</returns>
            <param name="ordinal">The zero-based column ordinal.</param>
            <param name="dataOffset">The index within the row from which to begin the read operation.</param>
            <param name="buffer">The buffer into which to copy the data.</param>
            <param name="bufferOffset">The index with the buffer to which the data will be copied.</param>
            <param name="length">The maximum number of characters to read.</param>
        </member>
        <member name="M:PommaLabs.Thrower.Reflection.FastMember.ObjectReader.GetDbDataReader(System.Int32)">
            <summary>
              Returns a <see cref="T:System.Data.Common.DbDataReader"/> object for the requested column ordinal that can
              be overridden with a provider-specific implementation.
            </summary>
            <returns>A <see cref="T:System.Data.Common.DbDataReader"/> object.</returns>
            <param name="ordinal">The zero-based column ordinal.</param>
        </member>
        <member name="M:PommaLabs.Thrower.Reflection.FastMember.ObjectReader.GetDataTypeName(System.Int32)">
            <summary>
              Gets name of the data type of the specified column.
            </summary>
            <returns>A string representing the name of the data type.</returns>
            <param name="ordinal">The zero-based column ordinal.</param>
            <exception cref="T:System.InvalidCastException">The specified cast is not valid.</exception>
        </member>
        <member name="M:PommaLabs.Thrower.Reflection.FastMember.ObjectReader.GetDateTime(System.Int32)">
            <summary>
              Gets the value of the specified column as a <see cref="T:System.DateTime"/> object.
            </summary>
            <returns>The value of the specified column.</returns>
            <param name="ordinal">The zero-based column ordinal.</param>
            <exception cref="T:System.InvalidCastException">The specified cast is not valid.</exception>
        </member>
        <member name="M:PommaLabs.Thrower.Reflection.FastMember.ObjectReader.GetDecimal(System.Int32)">
            <summary>
              Gets the value of the specified column as a <see cref="T:System.Decimal"/> object.
            </summary>
            <returns>The value of the specified column.</returns>
            <param name="ordinal">The zero-based column ordinal.</param>
            <exception cref="T:System.InvalidCastException">The specified cast is not valid.</exception>
        </member>
        <member name="M:PommaLabs.Thrower.Reflection.FastMember.ObjectReader.GetDouble(System.Int32)">
            <summary>
              Gets the value of the specified column as a double-precision floating point number.
            </summary>
            <returns>The value of the specified column.</returns>
            <param name="ordinal">The zero-based column ordinal.</param>
            <exception cref="T:System.InvalidCastException">The specified cast is not valid.</exception>
        </member>
        <member name="M:PommaLabs.Thrower.Reflection.FastMember.ObjectReader.GetFieldType(System.Int32)">
            <summary>
              Gets the data type of the specified column.
            </summary>
            <returns>The data type of the specified column.</returns>
            <param name="ordinal">The zero-based column ordinal.</param>
            <exception cref="T:System.InvalidCastException">The specified cast is not valid.</exception>
        </member>
        <member name="M:PommaLabs.Thrower.Reflection.FastMember.ObjectReader.GetFloat(System.Int32)">
            <summary>
              Gets the value of the specified column as a single-precision floating point number.
            </summary>
            <returns>The value of the specified column.</returns>
            <param name="ordinal">The zero-based column ordinal.</param>
            <exception cref="T:System.InvalidCastException">The specified cast is not valid.</exception>
        </member>
        <member name="M:PommaLabs.Thrower.Reflection.FastMember.ObjectReader.GetGuid(System.Int32)">
            <summary>
              Gets the value of the specified column as a globally-unique identifier (GUID).
            </summary>
            <returns>The value of the specified column.</returns>
            <param name="ordinal">The zero-based column ordinal.</param>
            <exception cref="T:System.InvalidCastException">The specified cast is not valid.</exception>
        </member>
        <member name="M:PommaLabs.Thrower.Reflection.FastMember.ObjectReader.GetInt16(System.Int32)">
            <summary>
              Gets the value of the specified column as a 16-bit signed integer.
            </summary>
            <returns>The value of the specified column.</returns>
            <param name="ordinal">The zero-based column ordinal.</param>
            <exception cref="T:System.InvalidCastException">The specified cast is not valid.</exception>
        </member>
        <member name="M:PommaLabs.Thrower.Reflection.FastMember.ObjectReader.GetInt32(System.Int32)">
            <summary>
              Gets the value of the specified column as a 32-bit signed integer.
            </summary>
            <returns>The value of the specified column.</returns>
            <param name="ordinal">The zero-based column ordinal.</param>
            <exception cref="T:System.InvalidCastException">The specified cast is not valid.</exception>
        </member>
        <member name="M:PommaLabs.Thrower.Reflection.FastMember.ObjectReader.GetInt64(System.Int32)">
            <summary>
              Gets the value of the specified column as a 64-bit signed integer.
            </summary>
            <returns>The value of the specified column.</returns>
            <param name="ordinal">The zero-based column ordinal.</param>
            <exception cref="T:System.InvalidCastException">The specified cast is not valid.</exception>
        </member>
        <member name="M:PommaLabs.Thrower.Reflection.FastMember.ObjectReader.GetName(System.Int32)">
            <summary>
              Gets the name of the column, given the zero-based column ordinal.
            </summary>
            <returns>The name of the specified column.</returns>
            <param name="ordinal">The zero-based column ordinal.</param>
        </member>
        <member name="M:PommaLabs.Thrower.Reflection.FastMember.ObjectReader.GetOrdinal(System.String)">
            <summary>
              Gets the column ordinal given the name of the column.
            </summary>
            <returns>The zero-based column ordinal.</returns>
            <param name="name">The name of the column.</param>
            <exception cref="T:System.IndexOutOfRangeException">
              The name specified is not a valid column name.
            </exception>
        </member>
        <member name="M:PommaLabs.Thrower.Reflection.FastMember.ObjectReader.GetString(System.Int32)">
            <summary>
              Gets the value of the specified column as an instance of <see cref="T:System.String"/>.
            </summary>
            <returns>The value of the specified column.</returns>
            <param name="ordinal">The zero-based column ordinal.</param>
            <exception cref="T:System.InvalidCastException">The specified cast is not valid.</exception>
        </member>
        <member name="M:PommaLabs.Thrower.Reflection.FastMember.ObjectReader.GetValue(System.Int32)">
            <summary>
              Gets the value of the specified column as an instance of <see cref="T:System.Object"/>.
            </summary>
            <returns>The value of the specified column.</returns>
            <param name="ordinal">The zero-based column ordinal.</param>
        </member>
        <member name="M:PommaLabs.Thrower.Reflection.FastMember.ObjectReader.GetEnumerator">
            <summary>
              Returns an <see cref="T:System.Collections.IEnumerator"/> that can be used to iterate through the rows in
              the data reader.
            </summary>
            <returns>
              An <see cref="T:System.Collections.IEnumerator"/> that can be used to iterate through the rows in the data reader.
            </returns>
        </member>
        <member name="M:PommaLabs.Thrower.Reflection.FastMember.ObjectReader.GetValues(System.Object[])">
            <summary>
              Populates an array of objects with the column values of the current row.
            </summary>
            <returns>The number of instances of <see cref="T:System.Object"/> in the array.</returns>
            <param name="values">
              An array of <see cref="T:System.Object"/> into which to copy the attribute columns.
            </param>
        </member>
        <member name="M:PommaLabs.Thrower.Reflection.FastMember.ObjectReader.IsDBNull(System.Int32)">
            <summary>
              Gets a value that indicates whether the column contains nonexistent or missing values.
            </summary>
            <returns>
              true if the specified column is equivalent to <see cref="T:System.DBNull"/>; otherwise false.
            </returns>
            <param name="ordinal">The zero-based column ordinal.</param>
        </member>
        <member name="P:PommaLabs.Thrower.Reflection.FastMember.ObjectReader.Item(System.String)">
            <summary>
              Gets the value of the current object in the member specified.
            </summary>
            <param name="name">Member name.</param>
        </member>
        <member name="P:PommaLabs.Thrower.Reflection.FastMember.ObjectReader.Item(System.Int32)">
            <summary>
              Gets the value of the current object in the member specified.
            </summary>
            <param name="ordinal">Member ordinal.</param>
        </member>
        <member name="M:PommaLabs.Thrower.Reflection.FastMember.ObjectReader.Min(System.Int32,System.Int32)">
            <summary>
              This avoids a reference to a library for .NET standard.
            </summary>
            <param name="x">X.</param>
            <param name="y">Y.</param>
            <returns>Minimum.</returns>
        </member>
        <member name="T:PommaLabs.Thrower.Reflection.FastMember.TypeAccessor">
            <summary>
              Provides by-name member-access to objects of a given type.
            </summary>
        </member>
        <member name="P:PommaLabs.Thrower.Reflection.FastMember.TypeAccessor.CreateNewSupported">
            <summary>
              Does this type support new instances via a parameterless constructor?
            </summary>
        </member>
        <member name="M:PommaLabs.Thrower.Reflection.FastMember.TypeAccessor.CreateNew">
            <summary>
              Create a new instance of this type.
            </summary>
        </member>
        <member name="P:PommaLabs.Thrower.Reflection.FastMember.TypeAccessor.GetMembersSupported">
            <summary>
              Can this type be queried for member availability?
            </summary>
        </member>
        <member name="M:PommaLabs.Thrower.Reflection.FastMember.TypeAccessor.GetMembers">
            <summary>
              Query the members available for this type.
            </summary>
        </member>
        <member name="M:PommaLabs.Thrower.Reflection.FastMember.TypeAccessor.Create(System.Type)">
            <summary>
              Provides a type-specific accessor, allowing by-name access for all objects of that type.
            </summary>
            <param name="type">The type.</param>
            <remarks>The accessor is cached internally; a pre-existing accessor may be returned.</remarks>
        </member>
        <member name="M:PommaLabs.Thrower.Reflection.FastMember.TypeAccessor.Create``1">
            <summary>
              Provides a type-specific accessor, allowing by-name access for all objects of that type.
            </summary>
            <remarks>The accessor is cached internally; a pre-existing accessor may be returned.</remarks>
        </member>
        <member name="M:PommaLabs.Thrower.Reflection.FastMember.TypeAccessor.Create(System.Type,System.Boolean)">
            <summary>
              Provides a type-specific accessor, allowing by-name access for all objects of that type.
            </summary>
            <param name="type">The type.</param>
            <param name="allowNonPublicAccessors">Allow usage of non public accessors.</param>
            <remarks>The accessor is cached internally; a pre-existing accessor may be returned</remarks>
        </member>
        <member name="M:PommaLabs.Thrower.Reflection.FastMember.TypeAccessor.Create``1(System.Boolean)">
            <summary>
              Provides a type-specific accessor, allowing by-name access for all objects of that type.
            </summary>
            <param name="allowNonPublicAccessors">Allow usage of non public accessors.</param>
            <remarks>The accessor is cached internally; a pre-existing accessor may be returned.</remarks>
        </member>
        <member name="T:PommaLabs.Thrower.Reflection.FastMember.TypeAccessor.RuntimeTypeAccessor">
            <summary>
              A TypeAccessor based on a Type implementation, with available member metadata
            </summary>
        </member>
        <member name="P:PommaLabs.Thrower.Reflection.FastMember.TypeAccessor.RuntimeTypeAccessor.Type">
            <summary>
              Returns the Type represented by this accessor
            </summary>
        </member>
        <member name="P:PommaLabs.Thrower.Reflection.FastMember.TypeAccessor.RuntimeTypeAccessor.GetMembersSupported">
            <summary>
              Can this type be queried for member availability?
            </summary>
        </member>
        <member name="M:PommaLabs.Thrower.Reflection.FastMember.TypeAccessor.RuntimeTypeAccessor.GetMembers">
            <summary>
              Query the members available for this type
            </summary>
        </member>
        <member name="M:PommaLabs.Thrower.Reflection.FastMember.TypeAccessor.DelegateAccessor.CreateNew">
            <summary>
              Create a new instance of this type.
            </summary>
        </member>
        <member name="P:PommaLabs.Thrower.Reflection.FastMember.TypeAccessor.Item(System.Object,System.String)">
            <summary>
              Get or set the value of a named member on the target instance
            </summary>
        </member>
        <member name="T:PommaLabs.Thrower.Reflection.PortableTypeInfo">
            <summary>
              Portable version of some useful reflection methods.
            </summary>
        </member>
        <member name="P:PommaLabs.Thrower.Reflection.PortableTypeInfo.EmptyTypes">
            <summary>
              Represents an empty array of type <see cref="T:System.Type"/>. This property is read-only.
            </summary>
        </member>
        <member name="M:PommaLabs.Thrower.Reflection.PortableTypeInfo.GetTypeAssembly(System.Type)">
            <summary>
              Returns the assembly to which given type belongs.
            </summary>
            <param name="type">The type.</param>
            <returns>The assembly to which given type belongs.</returns>
        </member>
        <member name="M:PommaLabs.Thrower.Reflection.PortableTypeInfo.GetTypeAssembly``1">
            <summary>
              Returns the assembly to which given type belongs.
            </summary>
            <typeparam name="T">The type.</typeparam>
            <returns>The assembly to which given type belongs.</returns>
        </member>
        <member name="M:PommaLabs.Thrower.Reflection.PortableTypeInfo.GetCustomAttributes(System.Type,System.Boolean)">
            <summary>
              Gets the custom attributes for given type.
            </summary>
            <param name="type">The type.</param>
            <param name="inherit">
              True to search this type's inheritance chain to find the attributes; otherwise, false.
            </param>
            <returns>The custom attributes for given type.</returns>
        </member>
        <member name="M:PommaLabs.Thrower.Reflection.PortableTypeInfo.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
              Gets the custom attributes for given member.
            </summary>
            <param name="memberInfo">The member.</param>
            <param name="inherit">
              True to search this member's inheritance chain to find the attributes; otherwise, false.
            </param>
            <returns>The custom attributes for given member.</returns>
        </member>
        <member name="M:PommaLabs.Thrower.Reflection.PortableTypeInfo.GetConstructors(System.Type)">
            <summary>
              Gets the constructors for given type.
            </summary>
            <param name="type">The type.</param>
            <returns>The constructors for given type.</returns>
        </member>
        <member name="M:PommaLabs.Thrower.Reflection.PortableTypeInfo.GetConstructors``1">
            <summary>
              Gets the constructors for given type.
            </summary>
            <typeparam name="T">The type.</typeparam>
            <returns>The constructors for given type.</returns>
        </member>
        <member name="M:PommaLabs.Thrower.Reflection.PortableTypeInfo.GetBaseType(System.Type)">
            <summary>
              Gets the base type of given type.
            </summary>
            <param name="type">The type.</param>
            <returns>The base type of given type.</returns>
        </member>
        <member name="M:PommaLabs.Thrower.Reflection.PortableTypeInfo.GetGenericTypeDefinition(System.Type)">
            <summary>
              Gets the generic type definition of given type.
            </summary>
            <param name="type">The type.</param>
            <returns>The generic type definition of given type.</returns>
        </member>
        <member name="M:PommaLabs.Thrower.Reflection.PortableTypeInfo.GetGenericTypeArguments(System.Type)">
            <summary>
              Gets the generic type arguments of given type.
            </summary>
            <param name="type">The type.</param>
            <returns>The generic type arguments of given type.</returns>
        </member>
        <member name="M:PommaLabs.Thrower.Reflection.PortableTypeInfo.GetInterfaces(System.Type)">
            <summary>
              Gets the interfaces for given type.
            </summary>
            <param name="type">The type.</param>
            <returns>The interfaces for given type.</returns>
        </member>
        <member name="M:PommaLabs.Thrower.Reflection.PortableTypeInfo.GetPublicProperties(System.Type)">
            <summary>
              Gets all the public instance properties for given type.
            </summary>
            <param name="type">The type.</param>
            <returns>The public instance properties for given type.</returns>
        </member>
        <member name="M:PommaLabs.Thrower.Reflection.PortableTypeInfo.GetPublicProperties``1">
            <summary>
              Gets all the instance properties for given type.
            </summary>
            <typeparam name="T">The type.</typeparam>
            <returns>The instance properties for given type.</returns>
        </member>
        <member name="M:PommaLabs.Thrower.Reflection.PortableTypeInfo.GetPublicPropertyValue(System.Object,System.String)">
            <summary>
              Gets the value of given property on given instance.
            </summary>
            <param name="instance">The instance.</param>
            <param name="propertyName">The property name.</param>
            <returns>The value of given property on given instance.</returns>
        </member>
        <member name="M:PommaLabs.Thrower.Reflection.PortableTypeInfo.GetPublicPropertyValue``1(System.Object,System.String)">
            <summary>
              Gets the value of given property on given instance.
            </summary>
            <typeparam name="TValue">The type of the property value.</typeparam>
            <param name="instance">The instance.</param>
            <param name="propertyName">The property name.</param>
            <returns>The value of given property on given instance.</returns>
        </member>
        <member name="M:PommaLabs.Thrower.Reflection.PortableTypeInfo.GetPublicPropertyValue(System.Object,System.Reflection.PropertyInfo)">
            <summary>
              Gets the value of given property on given instance.
            </summary>
            <param name="instance">The instance.</param>
            <param name="propertyInfo">The property info.</param>
            <returns>The value of given property on given instance.</returns>
        </member>
        <member name="M:PommaLabs.Thrower.Reflection.PortableTypeInfo.GetPublicPropertyValue(PommaLabs.Thrower.Reflection.FastMember.TypeAccessor,System.Object,System.Reflection.PropertyInfo)">
            <summary>
              Gets the value of given property on given instance.
            </summary>
            <param name="typeAccessor">The type accessor.</param>
            <param name="instance">The instance.</param>
            <param name="propertyInfo">The property info.</param>
            <returns>The value of given property on given instance.</returns>
        </member>
        <member name="M:PommaLabs.Thrower.Reflection.PortableTypeInfo.IsAbstract(System.Type)">
            <summary>
              Determines whether the specified type is abstract.
            </summary>
            <param name="type">The type.</param>
            <returns>Whether the specified type is abstract.</returns>
        </member>
        <member name="M:PommaLabs.Thrower.Reflection.PortableTypeInfo.IsAbstract``1">
            <summary>
              Determines whether the specified type is abstract.
            </summary>
            <typeparam name="T">The type.</typeparam>
            <returns>Whether the specified type is abstract.</returns>
        </member>
        <member name="M:PommaLabs.Thrower.Reflection.PortableTypeInfo.IsClass(System.Type)">
            <summary>
              Determines whether the specified type is a class.
            </summary>
            <param name="type">The type.</param>
            <returns>Whether the specified type is a class.</returns>
        </member>
        <member name="M:PommaLabs.Thrower.Reflection.PortableTypeInfo.IsClass``1">
            <summary>
              Determines whether the specified type is a class.
            </summary>
            <typeparam name="T">The type.</typeparam>
            <returns>Whether the specified type is a class.</returns>
        </member>
        <member name="M:PommaLabs.Thrower.Reflection.PortableTypeInfo.IsAssignableFrom(System.Object,System.Type)">
            <summary>
              Determines whether an instance of the current <see cref="T:System.Type"/> can be assigned from
              an instance of the specified Type.
            </summary>
            <param name="obj">The object.</param>
            <param name="type">The type.</param>
            <returns>
              Whether an instance of the current <see cref="T:System.Type"/> can be assigned from an instance
              of the specified Type.
            </returns>
        </member>
        <member name="M:PommaLabs.Thrower.Reflection.PortableTypeInfo.IsEnum(System.Type)">
            <summary>
              Determines whether the specified type is an enumeration.
            </summary>
            <param name="type">The type.</param>
            <returns>Whether the specified type is an enumeration.</returns>
        </member>
        <member name="M:PommaLabs.Thrower.Reflection.PortableTypeInfo.IsEnum``1">
            <summary>
              Determines whether the specified type is an enumeration.
            </summary>
            <typeparam name="T">The type.</typeparam>
            <returns>Whether the specified type is an enumeration.</returns>
        </member>
        <member name="M:PommaLabs.Thrower.Reflection.PortableTypeInfo.IsGenericType(System.Type)">
            <summary>
              Determines whether the specified type is a generic type.
            </summary>
            <param name="type">The type.</param>
            <returns>Whether the specified type is a generic type.</returns>
        </member>
        <member name="M:PommaLabs.Thrower.Reflection.PortableTypeInfo.IsGenericType``1">
            <summary>
              Determines whether the specified type is a generic type.
            </summary>
            <typeparam name="T">The type.</typeparam>
            <returns>Whether the specified type is a generic type.</returns>
        </member>
        <member name="M:PommaLabs.Thrower.Reflection.PortableTypeInfo.IsGenericTypeDefinition(System.Type)">
            <summary>
              Determines whether the specified type is a generic type definition.
            </summary>
            <param name="type">The type.</param>
            <returns>Whether the specified type is a generic type definition.</returns>
        </member>
        <member name="M:PommaLabs.Thrower.Reflection.PortableTypeInfo.IsGenericTypeDefinition``1">
            <summary>
              Determines whether the specified type is a generic type definition.
            </summary>
            <typeparam name="T">The type.</typeparam>
            <returns>Whether the specified type is a generic type definition.</returns>
        </member>
        <member name="M:PommaLabs.Thrower.Reflection.PortableTypeInfo.IsInstanceOf(System.Object,System.Type)">
            <summary>
              Determines whether the specified object is an instance of the current <see cref="T:System.Type"/>.
            </summary>
            <param name="obj">The object.</param>
            <param name="type">The type.</param>
            <returns>Whether the specified object is an instance of the current <see cref="T:System.Type"/>.</returns>
        </member>
        <member name="M:PommaLabs.Thrower.Reflection.PortableTypeInfo.IsInterface(System.Type)">
            <summary>
              Determines whether the specified type is an interface.
            </summary>
            <param name="type">The type.</param>
            <returns>Whether the specified type is an interface.</returns>
        </member>
        <member name="M:PommaLabs.Thrower.Reflection.PortableTypeInfo.IsInterface``1">
            <summary>
              Determines whether the specified type is an interface.
            </summary>
            <typeparam name="T">The type.</typeparam>
            <returns>Whether the specified type is an interface.</returns>
        </member>
        <member name="M:PommaLabs.Thrower.Reflection.PortableTypeInfo.IsPrimitive(System.Type)">
            <summary>
              Determines whether the specified type is primitive.
            </summary>
            <param name="type">The type.</param>
            <returns>Whether the specified type is primitive.</returns>
        </member>
        <member name="M:PommaLabs.Thrower.Reflection.PortableTypeInfo.IsPrimitive``1">
            <summary>
              Determines whether the specified type is primitive.
            </summary>
            <typeparam name="T">The type.</typeparam>
            <returns>Whether the specified type is primitive.</returns>
        </member>
        <member name="M:PommaLabs.Thrower.Reflection.PortableTypeInfo.IsValueType(System.Type)">
            <summary>
              Determines whether the specified type is a value type.
            </summary>
            <param name="type">The type.</param>
            <returns>Whether the specified type is a value type.</returns>
        </member>
        <member name="M:PommaLabs.Thrower.Reflection.PortableTypeInfo.IsValueType``1">
            <summary>
              Determines whether the specified type is a value type.
            </summary>
            <typeparam name="T">The type.</typeparam>
            <returns>Whether the specified type is a value type.</returns>
        </member>
        <member name="M:PommaLabs.Thrower.Reflection.PortableTypeInfo.IsPublic(System.Type)">
            <summary>
              Determines whether the specified type is public.
            </summary>
            <param name="type">The type.</param>
            <returns>Whether the specified type is public.</returns>
        </member>
        <member name="M:PommaLabs.Thrower.Reflection.PortableTypeInfo.IsPublic``1">
            <summary>
              Determines whether the specified type is public.
            </summary>
            <typeparam name="T">The type.</typeparam>
            <returns>Whether the specified type is public.</returns>
        </member>
        <member name="M:PommaLabs.Thrower.Reflection.PortableTypeInfo.IsNestedPublic(System.Type)">
            <summary>
              Determines whether the specified type is nested public.
            </summary>
            <param name="type">The type.</param>
            <returns>Whether the specified type is nested public.</returns>
        </member>
        <member name="M:PommaLabs.Thrower.Reflection.PortableTypeInfo.IsNestedPublic``1">
            <summary>
              Determines whether the specified type is nested public.
            </summary>
            <typeparam name="T">The type.</typeparam>
            <returns>Whether the specified type is nested public.</returns>
        </member>
        <member name="T:PommaLabs.Thrower.Reflection.PortableTypeInfo.CastTo`1">
            <summary>
              Class to cast to type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">Target type.</typeparam>
            <remarks>Found on StackOverflow: "http://stackoverflow.com/a/23391746/1880086".</remarks>
        </member>
        <member name="M:PommaLabs.Thrower.Reflection.PortableTypeInfo.CastTo`1.From``1(``0)">
            <summary>
              Casts <typeparamref name="S"/> to <typeparamref name="T"/>. This does not cause
              boxing for value types. Useful in generic methods.
            </summary>
            <param name="s">The value that should be cast.</param>
            <typeparam name="S">Source type to cast from. Usually a generic type.</typeparam>
        </member>
        <member name="T:PommaLabs.Thrower.ThrowerException">
            <summary>
              Exception thrown by <see cref="T:PommaLabs.Thrower.Raise`1"/> when the type parameter passed to that class
              has something invalid (missing constructors, etc).
            </summary>
        </member>
        <member name="T:PommaLabs.Thrower.Validation.EmailAddressAttribute">
            <summary>
              Validates email addresses stored as <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="M:PommaLabs.Thrower.Validation.EmailAddressAttribute.#ctor">
            <summary>
              Default constructor.
            </summary>
        </member>
        <member name="P:PommaLabs.Thrower.Validation.EmailAddressAttribute.Options">
            <summary>
              Options used by the validation process.
            </summary>
        </member>
        <member name="M:PommaLabs.Thrower.Validation.EmailAddressAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
              Validates the email address stored in <paramref name="value"/>.
            </summary>
            <param name="value">The email address that should be validated.</param>
            <param name="validationContext">The validation context.</param>
            <returns>True if given email address is valid or null, false otherwise.</returns>
        </member>
        <member name="T:PommaLabs.Thrower.Validation.EmailAddressValidator">
            <summary>
              An email address validator.
            </summary>
            <remarks>An email address validator.</remarks>
        </member>
        <member name="M:PommaLabs.Thrower.Validation.EmailAddressValidator.Validate(System.String,PommaLabs.Thrower.Validation.EmailAddressValidator.Options)">
            <summary>
              Validates the specified email address.
            </summary>
            <remarks>
              <para>Validates the syntax of an email address.</para>
              <para>
                If <paramref name="options"/> contains <see cref="F:PommaLabs.Thrower.Validation.EmailAddressValidator.Options.AllowInternational"/>, then
                the validator will use the newer International Email standards for validating the
                email address.
              </para>
            </remarks>
            <returns><c>true</c> if the email address is valid; otherwise <c>false</c>.</returns>
            <param name="emailAddress">An email address.</param>
            <param name="options">Customizations for the validation process.</param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="emailAddress"/> is <c>null</c>.
            </exception>
        </member>
        <member name="T:PommaLabs.Thrower.Validation.EmailAddressValidator.Options">
            <summary>
              Options used by validation process.
            </summary>
        </member>
        <member name="F:PommaLabs.Thrower.Validation.EmailAddressValidator.Options.None">
            <summary>
              No option specified.
            </summary>
        </member>
        <member name="F:PommaLabs.Thrower.Validation.EmailAddressValidator.Options.AllowInternational">
            <summary>
              Whether the validator should allow international characters or not.
            </summary>
        </member>
        <member name="F:PommaLabs.Thrower.Validation.EmailAddressValidator.Options.AllowTopLevelDomains">
            <summary>
              Whether the validator should allow addresses at top-level domains or not.
            </summary>
        </member>
        <member name="T:PommaLabs.Thrower.Validation.EnumerationAttribute">
            <summary>
              Validates enumeration-typed members.
            </summary>
        </member>
        <member name="M:PommaLabs.Thrower.Validation.EnumerationAttribute.#ctor">
            <summary>
              Default constructor.
            </summary>
        </member>
        <member name="M:PommaLabs.Thrower.Validation.EnumerationAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
              Validates the enumeration stored in <paramref name="value"/>.
            </summary>
            <param name="value">The enumeration that should be validated.</param>
            <param name="validationContext">The validation context.</param>
            <returns>True if given enumeration is valid, false otherwise.</returns>
        </member>
        <member name="T:PommaLabs.Thrower.Validation.EnumerationValidator">
            <summary>
              An enumeration validator which ensures given enumeration value is defined in specified
              enumeration type. This also works when enumeration has been decorated with <see cref="T:System.FlagsAttribute"/>.
            </summary>
        </member>
        <member name="M:PommaLabs.Thrower.Validation.EnumerationValidator.Validate``1(System.Nullable{``0})">
            <summary>
              Ensures given enumeration value is defined in specified enumeration type.
            </summary>
            <typeparam name="TEnum">The enumeration type.</typeparam>
            <param name="value">The enumeration value.</param>
            <returns>
              True if given enumeration value is defined in specified enumeration type, false otherwise.
            </returns>
            <remarks>This also works when enumeration has been decorated with <see cref="T:System.FlagsAttribute"/>.</remarks>
        </member>
        <member name="M:PommaLabs.Thrower.Validation.EnumerationValidator.Validate``1(``0)">
            <summary>
              Ensures given enumeration value is defined in specified enumeration type.
            </summary>
            <typeparam name="TEnum">The enumeration type.</typeparam>
            <param name="value">The enumeration value.</param>
            <returns>
              True if given enumeration value is defined in specified enumeration type, false otherwise.
            </returns>
            <remarks>This also works when enumeration has been decorated with <see cref="T:System.FlagsAttribute"/>.</remarks>
        </member>
        <member name="M:PommaLabs.Thrower.Validation.EnumerationValidator.Validate(System.Type,System.Object)">
            <summary>
              Ensures given enumeration value is defined in specified enumeration type.
            </summary>
            <param name="enumType">The enumeration type.</param>
            <param name="value">The enumeration value.</param>
            <returns>
              True if given enumeration value is defined in specified enumeration type, false otherwise.
            </returns>
            <remarks>This also works when enumeration has been decorated with <see cref="T:System.FlagsAttribute"/>.</remarks>
        </member>
        <member name="T:PommaLabs.Thrower.Validation.ObjectValidator">
            <summary>
              Validates an object public properties that have been decorated with the
              <see cref="T:PommaLabs.Thrower.Validation.ValidateAttribute"/> custom attribute.
            </summary>
        </member>
        <member name="F:PommaLabs.Thrower.Validation.ObjectValidator.RootPlaceholder">
            <summary>
              The placeholder used to indicate the starting object.
            </summary>
        </member>
        <member name="M:PommaLabs.Thrower.Validation.ObjectValidator.FormatValidationErrors(System.Collections.Generic.IEnumerable{PommaLabs.Thrower.Validation.ValidationError},System.String)">
            <summary>
              Prepares a readable messages containing all validation errors.
            </summary>
            <param name="validationErrors">The validation errors.</param>
            <param name="startMessage">An optional prefix.</param>
            <returns>A readable messages containing all validation errors.</returns>
        </member>
        <member name="M:PommaLabs.Thrower.Validation.ObjectValidator.Validate(System.Object,System.Collections.Generic.IList{PommaLabs.Thrower.Validation.ValidationError}@)">
            <summary>
              Validates given object using information contained in the
              <see cref="T:PommaLabs.Thrower.Validation.ValidateAttribute"/> custom attribute.
            </summary>
            <param name="obj">The object to be validated.</param>
            <param name="validationErrors">All validation errors found.</param>
            <returns>True if object is valid, false otherwise.</returns>
        </member>
        <member name="T:PommaLabs.Thrower.Validation.PhoneNumberAttribute">
            <summary>
              Validates phone numbers stored as <see cref="T:System.String"/> members.
            </summary>
        </member>
        <member name="M:PommaLabs.Thrower.Validation.PhoneNumberAttribute.#ctor">
            <summary>
              Default constructor.
            </summary>
        </member>
        <member name="M:PommaLabs.Thrower.Validation.PhoneNumberAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
              Validates the phone number stored in <paramref name="value"/>.
            </summary>
            <param name="value">The phone number that should be validated.</param>
            <param name="validationContext">The validation context.</param>
            <returns>True if given phone number is valid or null, false otherwise.</returns>
        </member>
        <member name="T:PommaLabs.Thrower.Validation.PhoneNumberValidator">
            <summary>
              A phone number validator.
            </summary>
            <remarks>A phone number validator.</remarks>
        </member>
        <member name="M:PommaLabs.Thrower.Validation.PhoneNumberValidator.Validate(System.String)">
            <summary>
              Validates the specified phone number.
            </summary>
            <param name="phoneNumber">A phone number.</param>
            <returns><c>true</c> if the phone number is valid; otherwise <c>false</c>.</returns>
        </member>
        <member name="T:PommaLabs.Thrower.Validation.ValidateAttribute">
            <summary>
              Indicates that the property should be validated.
            </summary>
        </member>
        <member name="P:PommaLabs.Thrower.Validation.ValidateAttribute.Required">
             <summary>
               Indicates that the property is required, that is, it will be checked against null.
            
               Default value is false.
             </summary>
        </member>
        <member name="P:PommaLabs.Thrower.Validation.ValidateAttribute.Enumerable">
             <summary>
               If the property is an <see cref="T:System.Collections.IEnumerable"/>, then this flag controls whether it
               should enumerated or not.
            
               Default value is true.
             </summary>
        </member>
        <member name="P:PommaLabs.Thrower.Validation.ValidateAttribute.EnumerableItemsRequired">
             <summary>
               If the property is an <see cref="T:System.Collections.IEnumerable"/>, then this flag controls whether its
               items are required or not.
            
               Default value is false.
             </summary>
        </member>
        <member name="P:PommaLabs.Thrower.Validation.ValidateAttribute.CollectionItemsMinCount">
             <summary>
               If the property is an <see cref="T:System.Collections.ICollection"/>, then this flag controls the minimum
               value for <see cref="P:System.Collections.ICollection.Count"/>.
            
               Default value is
               <code>
                 0L
               </code>
               .
             </summary>
        </member>
        <member name="P:PommaLabs.Thrower.Validation.ValidateAttribute.CollectionItemsMaxCount">
             <summary>
               If the property is an <see cref="T:System.Collections.ICollection"/>, then this flag controls the maximum
               value for <see cref="P:System.Collections.ICollection.Count"/>.
            
               Default value is <see cref="F:System.Int64.MaxValue"/>.
             </summary>
        </member>
        <member name="T:PommaLabs.Thrower.Validation.ValidationError">
            <summary>
              Represents an error found while validating an object.
            </summary>
        </member>
        <member name="M:PommaLabs.Thrower.Validation.ValidationError.#ctor(System.String,System.String)">
            <summary>
              Builds a validation error.
            </summary>
            <param name="path">Path.</param>
            <param name="reason">Reason.</param>
        </member>
        <member name="P:PommaLabs.Thrower.Validation.ValidationError.Path">
            <summary>
              The path to the wrong property.
            </summary>
        </member>
        <member name="P:PommaLabs.Thrower.Validation.ValidationError.Reason">
            <summary>
              What caused the error.
            </summary>
        </member>
        <member name="M:PommaLabs.Thrower.Validation.ValidationError.op_Inequality(PommaLabs.Thrower.Validation.ValidationError,PommaLabs.Thrower.Validation.ValidationError)">
            <summary>
              Compares two errors.
            </summary>
            <param name="error1">Left error.</param>
            <param name="error2">Right error.</param>
            <returns>True if they are not equal, false otherwise.</returns>
        </member>
        <member name="M:PommaLabs.Thrower.Validation.ValidationError.op_Equality(PommaLabs.Thrower.Validation.ValidationError,PommaLabs.Thrower.Validation.ValidationError)">
            <summary>
              Compares two errors.
            </summary>
            <param name="error1">Left error.</param>
            <param name="error2">Right error.</param>
            <returns>True if they are equal, false otherwise.</returns>
        </member>
        <member name="M:PommaLabs.Thrower.Validation.ValidationError.Equals(System.Object)">
            <summary>
              Indicates whether this instance and a specified object are equal.
            </summary>
            <returns>
              true if <paramref name="obj"/> and this instance are the same type and represent the
              same value; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current instance.</param>
        </member>
        <member name="M:PommaLabs.Thrower.Validation.ValidationError.Equals(PommaLabs.Thrower.Validation.ValidationError)">
            <summary>
              Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
              true if the current object is equal to the <paramref name="other"/> parameter;
              otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:PommaLabs.Thrower.Validation.ValidationError.GetHashCode">
            <summary>
              Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
    </members>
</doc>
